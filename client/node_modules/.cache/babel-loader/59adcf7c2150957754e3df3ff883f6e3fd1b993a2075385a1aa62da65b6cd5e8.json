{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\twj23\\\\Desktop\\\\Developer\\\\Games\\\\Multiplayer Blackjack Copy\\\\client\\\\src\\\\contexts\\\\GameContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { io } from 'socket.io-client';\nimport { useNavigate } from 'react-router-dom';\nimport { SOCKET_SERVER } from '../config';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const GameContext = /*#__PURE__*/createContext();\nexport const useGame = () => {\n  _s();\n  return useContext(GameContext);\n};\n_s(useGame, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const GameProvider = ({\n  children\n}) => {\n  _s2();\n  const [socket, setSocket] = useState(null);\n  const [connected, setConnected] = useState(false);\n  const [username, setUsername] = useState('');\n  const [balance, setBalance] = useState(1000);\n  const [roomId, setRoomId] = useState(null);\n  const [players, setPlayers] = useState([]);\n  const [dealer, setDealer] = useState({\n    cards: [],\n    score: 0\n  });\n  const [gameState, setGameState] = useState('waiting');\n  const [currentTurn, setCurrentTurn] = useState(null);\n  const [messages, setMessages] = useState([]);\n  const [error, setError] = useState(null);\n  const [gameHistory, setGameHistory] = useState([]);\n  const [leaderboard, setLeaderboard] = useState([]);\n  const [lastBet, setLastBet] = useState(0);\n  const [hintsEnabled, setHintsEnabled] = useState(true);\n  const [autoSkipNewRound, setAutoSkipNewRound] = useState(false);\n  const navigate = useNavigate();\n\n  // Helper function to add messages to the chat\n  const addMessage = message => {\n    setMessages(prevMessages => [...prevMessages, message]);\n  };\n\n  // Connect to socket server\n  useEffect(() => {\n    const newSocket = io(SOCKET_SERVER);\n    newSocket.on('connect', () => {\n      setSocket(newSocket);\n      setConnected(true);\n      console.log('Connected to server');\n    });\n    newSocket.on('disconnect', () => {\n      setConnected(false);\n      console.log('Disconnected from server');\n    });\n    newSocket.on('error', data => {\n      setError(data.message);\n      setTimeout(() => setError(null), 5000);\n    });\n    return () => {\n      newSocket.disconnect();\n    };\n  }, []);\n\n  // Handle room events\n  useEffect(() => {\n    if (!socket) return;\n    socket.on('room_joined', data => {\n      if (!data) return;\n      setRoomId(data.roomId);\n      setPlayers(data.players || []);\n      setGameState(data.gameState || 'waiting');\n      setError(null);\n\n      // Add system message\n      const playerNames = data.players ? data.players.map(p => p.username).join(', ') : '';\n      addMessage({\n        content: `Room joined. Current players: ${playerNames}`,\n        type: 'system',\n        timestamp: Date.now()\n      });\n\n      // Navigate to game room after successful join\n      navigate('/game-room');\n    });\n    socket.on('player_joined', data => {\n      if (!data || !data.players) return;\n      setPlayers(data.players);\n\n      // Add system message about new player\n      const newPlayer = data.players[data.players.length - 1];\n      if (newPlayer) {\n        addMessage({\n          content: `${newPlayer.username} joined the room`,\n          type: 'system',\n          timestamp: Date.now()\n        });\n      }\n    });\n    socket.on('player_left', data => {\n      if (!data) return;\n      setPlayers(data.players || []);\n\n      // Add system message about player leaving\n      if (data.leftPlayer) {\n        addMessage({\n          content: `${data.leftPlayer} left the room`,\n          type: 'system',\n          timestamp: Date.now()\n        });\n      }\n    });\n    return () => {\n      socket.off('room_joined');\n      socket.off('player_joined');\n      socket.off('player_left');\n    };\n  }, [socket, navigate]);\n\n  // Handle game events\n  useEffect(() => {\n    if (!socket) return;\n    socket.on('game_started', data => {\n      if (!data) return;\n      setGameState('betting');\n      setDealer(data.dealer || {\n        cards: [],\n        score: 0\n      });\n      setPlayers(data.players || []);\n      addMessage({\n        content: 'Game started! Place your bets.',\n        type: 'system',\n        timestamp: Date.now()\n      });\n    });\n    socket.on('betting_ended', data => {\n      if (!data) return;\n      setPlayers(data.players || []);\n      setGameState('playing');\n      addMessage({\n        content: 'All bets placed. Game is starting...',\n        type: 'system',\n        timestamp: Date.now()\n      });\n    });\n    socket.on('player_turn', data => {\n      setCurrentTurn(data.playerId);\n      const player = data.players && data.players.find(p => p.id === data.playerId);\n      addMessage({\n        content: `It's ${player ? player.username : 'unknown player'}'s turn`,\n        type: 'system',\n        timestamp: Date.now()\n      });\n    });\n    socket.on('card_dealt', data => {\n      if (!data) return;\n      if (data.to === 'dealer') {\n        setDealer(data.dealer || {\n          cards: [],\n          score: 0\n        });\n      } else if (data.to && data.cards) {\n        setPlayers(prev => prev.map(player => player.id === data.to ? {\n          ...player,\n          cards: data.cards,\n          score: data.score || 0\n        } : player));\n      }\n    });\n    socket.on('turn_ended', data => {\n      if (!data) return;\n      setCurrentTurn(data.nextTurn);\n      setPlayers(data.players || []);\n    });\n    socket.on('dealer_turn', () => {\n      setCurrentTurn('dealer');\n      addMessage({\n        content: `Dealer's turn`,\n        type: 'system',\n        timestamp: Date.now()\n      });\n    });\n    socket.on('game_ended', data => {\n      var _data$result, _players$;\n      if (!data) return;\n      setGameState('ended');\n      setDealer(data.dealer || {\n        cards: [],\n        score: 0\n      });\n      setPlayers(data.players || []);\n      setCurrentTurn(null);\n\n      // Update game history\n      const historyEntry = {\n        id: Date.now(),\n        dealer: data.dealer,\n        players: data.players,\n        results: ((_data$result = data.result) === null || _data$result === void 0 ? void 0 : _data$result.results) || [],\n        timestamp: Date.now()\n      };\n      setGameHistory(prev => [historyEntry, ...prev].slice(0, 10));\n\n      // Add system message\n      let resultMessage = 'Round ended. Check your results!';\n      if (data.result && data.result.results) {\n        const resultSummary = data.result.results.map(r => `${r.username}: ${r.outcome} (${r.amountChange >= 0 ? '+' : ''}${r.amountChange})`).join(', ');\n        resultMessage = `Round ended. Results: ${resultSummary}`;\n      }\n      addMessage({\n        content: resultMessage,\n        type: 'system',\n        timestamp: Date.now()\n      });\n\n      // If host has auto-next round enabled, automatically start a new round after a delay\n      if (autoSkipNewRound && socket.id === ((_players$ = players[0]) === null || _players$ === void 0 ? void 0 : _players$.id)) {\n        console.log(\"Auto next round enabled, starting new round in 3 seconds\");\n        setTimeout(() => {\n          console.log(\"Auto starting new round now\");\n          startNewRound();\n        }, 3000); // 3 second delay before starting new round\n      }\n    });\n    socket.on('new_round', data => {\n      if (!data) return;\n      setGameState('betting');\n      setPlayers(data.players || []);\n      setDealer(data.dealer || {\n        cards: [],\n        score: 0\n      });\n\n      // Add system message\n      const autoNextMessage = data.isAutoSkip ? ' (Auto Next Round by host)' : '';\n      addMessage({\n        content: `New round started${autoNextMessage}. Place your bets!`,\n        type: 'system',\n        timestamp: Date.now()\n      });\n    });\n    socket.on('message', data => {\n      addMessage(data);\n    });\n    socket.on('leaderboard_updated', data => {\n      setLeaderboard(data.leaderboard);\n    });\n    socket.on('player_split', data => {\n      var _data$players$find;\n      if (!data) return;\n      setPlayers(data.players || []);\n      addMessage({\n        content: `${((_data$players$find = data.players.find(p => p.id === data.playerId)) === null || _data$players$find === void 0 ? void 0 : _data$players$find.username) || 'Player'} split their hand`,\n        type: 'system',\n        timestamp: Date.now()\n      });\n    });\n    return () => {\n      socket.off('game_started');\n      socket.off('betting_ended');\n      socket.off('card_dealt');\n      socket.off('player_turn');\n      socket.off('turn_ended');\n      socket.off('dealer_turn');\n      socket.off('game_ended');\n      socket.off('new_round');\n      socket.off('message');\n      socket.off('leaderboard_updated');\n      socket.off('player_split');\n    };\n  }, [socket, autoSkipNewRound]);\n\n  // Game actions\n  const createRoom = (username, initialBalance = 1000) => {\n    if (!connected) return;\n    setUsername(username);\n    setBalance(initialBalance);\n    socket.emit('create_room', {\n      username,\n      balance: initialBalance\n    });\n  };\n  const joinRoom = (roomId, username, initialBalance = 1000) => {\n    if (!connected) return;\n    setUsername(username);\n    setBalance(initialBalance);\n    socket.emit('join_room', {\n      roomId,\n      username,\n      balance: initialBalance\n    });\n  };\n  const startGame = () => {\n    if (!connected || !roomId) return;\n    socket.emit('start_game', {\n      roomId\n    });\n  };\n  const placeBet = amount => {\n    if (!connected || !roomId) return;\n    socket.emit('place_bet', {\n      roomId,\n      amount\n    });\n    setLastBet(amount);\n  };\n  const hit = () => {\n    if (!connected || !roomId) return;\n\n    // For split hands, we need to use the original player's socket ID\n    if (currentTurn && currentTurn.includes('-split')) {\n      const originalPlayerId = currentTurn.split('-')[0];\n      if (originalPlayerId === socket.id) {\n        socket.emit('hit', {\n          roomId,\n          handId: currentTurn\n        });\n      }\n    } else if (currentTurn === socket.id) {\n      socket.emit('hit', {\n        roomId\n      });\n    }\n  };\n  const stand = () => {\n    if (!connected || !roomId) return;\n\n    // For split hands, we need to use the original player's socket ID\n    if (currentTurn && currentTurn.includes('-split')) {\n      const originalPlayerId = currentTurn.split('-')[0];\n      if (originalPlayerId === socket.id) {\n        socket.emit('stand', {\n          roomId,\n          handId: currentTurn\n        });\n      }\n    } else if (currentTurn === socket.id) {\n      socket.emit('stand', {\n        roomId\n      });\n    }\n  };\n  const doubleDown = () => {\n    if (!connected || !roomId) return;\n\n    // For split hands, we need to use the original player's socket ID\n    if (currentTurn && currentTurn.includes('-split')) {\n      const originalPlayerId = currentTurn.split('-')[0];\n      if (originalPlayerId === socket.id) {\n        socket.emit('double_down', {\n          roomId,\n          handId: currentTurn\n        });\n      }\n    } else if (currentTurn === socket.id) {\n      socket.emit('double_down', {\n        roomId\n      });\n    }\n  };\n  const split = () => {\n    if (!connected || !roomId || currentTurn !== socket.id) return;\n\n    // Can't split a split hand\n    if (currentTurn.includes('-split')) return;\n    socket.emit('split', {\n      roomId\n    });\n  };\n  const surrender = () => {\n    if (!connected || !roomId) return;\n\n    // For split hands, we need to use the original player's socket ID\n    if (currentTurn && currentTurn.includes('-split')) {\n      const originalPlayerId = currentTurn.split('-')[0];\n      if (originalPlayerId === socket.id) {\n        socket.emit('surrender', {\n          roomId,\n          handId: currentTurn\n        });\n      }\n    } else if (currentTurn === socket.id) {\n      socket.emit('surrender', {\n        roomId\n      });\n    }\n  };\n  const startNewRound = () => {\n    if (!connected || !roomId) return;\n    socket.emit('new_round', {\n      roomId\n    });\n  };\n  const sendMessage = message => {\n    if (!connected || !roomId) return;\n    socket.emit('send_message', {\n      roomId,\n      message,\n      sender: username\n    });\n  };\n  const leaveRoom = () => {\n    if (!connected || !roomId) return;\n    socket.emit('leave_room', {\n      roomId\n    });\n    setRoomId(null);\n    setPlayers([]);\n    setDealer({\n      cards: [],\n      score: 0\n    });\n    setGameState('waiting');\n    setCurrentTurn(null);\n    setMessages([]);\n  };\n\n  // Check if it's current player's turn\n  const isPlayerTurn = () => {\n    if (!socket || !currentTurn) return false;\n\n    // Direct match with player's socket ID\n    if (currentTurn === socket.id) return true;\n\n    // Check if it's the player's split hand turn\n    // Split hands have IDs in the format: originalPlayerId-split\n    if (currentTurn.includes('-split')) {\n      const originalPlayerId = currentTurn.split('-')[0];\n      return originalPlayerId === socket.id;\n    }\n    return false;\n  };\n\n  // Find the current player\n  const getCurrentPlayer = () => {\n    if (!socket || !players) return null;\n\n    // First check for the player's main hand\n    const player = players.find(p => p.id === socket.id);\n\n    // If it's the player's split hand turn, return that hand instead\n    if (currentTurn && currentTurn.includes('-split')) {\n      const splitHand = players.find(p => p.id === currentTurn);\n      if (splitHand && splitHand.originalPlayer === socket.id) {\n        return splitHand;\n      }\n    }\n    return player;\n  };\n\n  // Toggle hints\n  const toggleHints = () => {\n    setHintsEnabled(prev => !prev);\n  };\n  return /*#__PURE__*/_jsxDEV(GameContext.Provider, {\n    value: {\n      connected,\n      username,\n      balance,\n      roomId,\n      players,\n      dealer,\n      gameState,\n      currentTurn,\n      messages,\n      error,\n      gameHistory,\n      leaderboard,\n      lastBet,\n      hintsEnabled,\n      autoSkipNewRound,\n      createRoom,\n      joinRoom,\n      startGame,\n      placeBet,\n      hit,\n      stand,\n      doubleDown,\n      split,\n      surrender,\n      startNewRound,\n      sendMessage,\n      leaveRoom,\n      isPlayerTurn,\n      getCurrentPlayer,\n      toggleHints,\n      setAutoSkipNewRound\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 439,\n    columnNumber: 5\n  }, this);\n};\n_s2(GameProvider, \"6EH4D8c0uyfYYTli7xem2Re9UCA=\", false, function () {\n  return [useNavigate];\n});\n_c = GameProvider;\nvar _c;\n$RefreshReg$(_c, \"GameProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","io","useNavigate","SOCKET_SERVER","jsxDEV","_jsxDEV","GameContext","useGame","_s","GameProvider","children","_s2","socket","setSocket","connected","setConnected","username","setUsername","balance","setBalance","roomId","setRoomId","players","setPlayers","dealer","setDealer","cards","score","gameState","setGameState","currentTurn","setCurrentTurn","messages","setMessages","error","setError","gameHistory","setGameHistory","leaderboard","setLeaderboard","lastBet","setLastBet","hintsEnabled","setHintsEnabled","autoSkipNewRound","setAutoSkipNewRound","navigate","addMessage","message","prevMessages","newSocket","on","console","log","data","setTimeout","disconnect","playerNames","map","p","join","content","type","timestamp","Date","now","newPlayer","length","leftPlayer","off","playerId","player","find","id","to","prev","nextTurn","_data$result","_players$","historyEntry","results","result","slice","resultMessage","resultSummary","r","outcome","amountChange","startNewRound","autoNextMessage","isAutoSkip","_data$players$find","createRoom","initialBalance","emit","joinRoom","startGame","placeBet","amount","hit","includes","originalPlayerId","split","handId","stand","doubleDown","surrender","sendMessage","sender","leaveRoom","isPlayerTurn","getCurrentPlayer","splitHand","originalPlayer","toggleHints","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/twj23/Desktop/Developer/Games/Multiplayer Blackjack Copy/client/src/contexts/GameContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\nimport { io } from 'socket.io-client';\nimport { useNavigate } from 'react-router-dom';\nimport { SOCKET_SERVER } from '../config';\n\nexport const GameContext = createContext();\n\nexport const useGame = () => useContext(GameContext);\n\nexport const GameProvider = ({ children }) => {\n  const [socket, setSocket] = useState(null);\n  const [connected, setConnected] = useState(false);\n  const [username, setUsername] = useState('');\n  const [balance, setBalance] = useState(1000);\n  const [roomId, setRoomId] = useState(null);\n  const [players, setPlayers] = useState([]);\n  const [dealer, setDealer] = useState({ cards: [], score: 0 });\n  const [gameState, setGameState] = useState('waiting');\n  const [currentTurn, setCurrentTurn] = useState(null);\n  const [messages, setMessages] = useState([]);\n  const [error, setError] = useState(null);\n  const [gameHistory, setGameHistory] = useState([]);\n  const [leaderboard, setLeaderboard] = useState([]);\n  const [lastBet, setLastBet] = useState(0);\n  const [hintsEnabled, setHintsEnabled] = useState(true);\n  const [autoSkipNewRound, setAutoSkipNewRound] = useState(false);\n  const navigate = useNavigate();\n\n  // Helper function to add messages to the chat\n  const addMessage = (message) => {\n    setMessages(prevMessages => [...prevMessages, message]);\n  };\n\n  // Connect to socket server\n  useEffect(() => {\n    const newSocket = io(SOCKET_SERVER);\n    \n    newSocket.on('connect', () => {\n      setSocket(newSocket);\n      setConnected(true);\n      console.log('Connected to server');\n    });\n    \n    newSocket.on('disconnect', () => {\n      setConnected(false);\n      console.log('Disconnected from server');\n    });\n    \n    newSocket.on('error', (data) => {\n      setError(data.message);\n      setTimeout(() => setError(null), 5000);\n    });\n    \n    return () => {\n      newSocket.disconnect();\n    };\n  }, []);\n  \n  // Handle room events\n  useEffect(() => {\n    if (!socket) return;\n    \n    socket.on('room_joined', (data) => {\n      if (!data) return;\n      setRoomId(data.roomId);\n      setPlayers(data.players || []);\n      setGameState(data.gameState || 'waiting');\n      setError(null);\n      \n      // Add system message\n      const playerNames = data.players ? data.players.map(p => p.username).join(', ') : '';\n      addMessage({\n        content: `Room joined. Current players: ${playerNames}`,\n        type: 'system',\n        timestamp: Date.now()\n      });\n\n      // Navigate to game room after successful join\n      navigate('/game-room');\n    });\n    \n    socket.on('player_joined', (data) => {\n      if (!data || !data.players) return;\n      setPlayers(data.players);\n      \n      // Add system message about new player\n      const newPlayer = data.players[data.players.length - 1];\n      if (newPlayer) {\n        addMessage({\n          content: `${newPlayer.username} joined the room`,\n          type: 'system',\n          timestamp: Date.now()\n        });\n      }\n    });\n    \n    socket.on('player_left', (data) => {\n      if (!data) return;\n      setPlayers(data.players || []);\n      \n      // Add system message about player leaving\n      if (data.leftPlayer) {\n        addMessage({\n          content: `${data.leftPlayer} left the room`,\n          type: 'system',\n          timestamp: Date.now()\n        });\n      }\n    });\n    \n    return () => {\n      socket.off('room_joined');\n      socket.off('player_joined');\n      socket.off('player_left');\n    };\n  }, [socket, navigate]);\n  \n  // Handle game events\n  useEffect(() => {\n    if (!socket) return;\n    \n    socket.on('game_started', (data) => {\n      if (!data) return;\n      setGameState('betting');\n      setDealer(data.dealer || { cards: [], score: 0 });\n      setPlayers(data.players || []);\n      \n      addMessage({\n        content: 'Game started! Place your bets.',\n        type: 'system',\n        timestamp: Date.now()\n      });\n    });\n    \n    socket.on('betting_ended', (data) => {\n      if (!data) return;\n      setPlayers(data.players || []);\n      setGameState('playing');\n      \n      addMessage({\n        content: 'All bets placed. Game is starting...',\n        type: 'system',\n        timestamp: Date.now()\n      });\n    });\n    \n    socket.on('player_turn', (data) => {\n      setCurrentTurn(data.playerId);\n      \n      const player = data.players && data.players.find(p => p.id === data.playerId);\n      \n      addMessage({\n        content: `It's ${player ? player.username : 'unknown player'}'s turn`,\n        type: 'system',\n        timestamp: Date.now()\n      });\n    });\n    \n    socket.on('card_dealt', (data) => {\n      if (!data) return;\n      if (data.to === 'dealer') {\n        setDealer(data.dealer || { cards: [], score: 0 });\n      } else if (data.to && data.cards) {\n        setPlayers(prev => \n          prev.map(player => \n            player.id === data.to ? { ...player, cards: data.cards, score: data.score || 0 } : player\n          )\n        );\n      }\n    });\n    \n    socket.on('turn_ended', (data) => {\n      if (!data) return;\n      setCurrentTurn(data.nextTurn);\n      setPlayers(data.players || []);\n    });\n    \n    socket.on('dealer_turn', () => {\n      setCurrentTurn('dealer');\n      \n      addMessage({\n        content: `Dealer's turn`,\n        type: 'system',\n        timestamp: Date.now()\n      });\n    });\n    \n    socket.on('game_ended', (data) => {\n      if (!data) return;\n      setGameState('ended');\n      setDealer(data.dealer || { cards: [], score: 0 });\n      setPlayers(data.players || []);\n      setCurrentTurn(null);\n      \n      // Update game history\n      const historyEntry = {\n        id: Date.now(),\n        dealer: data.dealer,\n        players: data.players,\n        results: data.result?.results || [],\n        timestamp: Date.now()\n      };\n      setGameHistory(prev => [historyEntry, ...prev].slice(0, 10));\n      \n      // Add system message\n      let resultMessage = 'Round ended. Check your results!';\n      if (data.result && data.result.results) {\n        const resultSummary = data.result.results\n          .map(r => `${r.username}: ${r.outcome} (${r.amountChange >= 0 ? '+' : ''}${r.amountChange})`)\n          .join(', ');\n        resultMessage = `Round ended. Results: ${resultSummary}`;\n      }\n      \n      addMessage({\n        content: resultMessage,\n        type: 'system',\n        timestamp: Date.now()\n      });\n      \n      // If host has auto-next round enabled, automatically start a new round after a delay\n      if (autoSkipNewRound && socket.id === players[0]?.id) {\n        console.log(\"Auto next round enabled, starting new round in 3 seconds\");\n        setTimeout(() => {\n          console.log(\"Auto starting new round now\");\n          startNewRound();\n        }, 3000); // 3 second delay before starting new round\n      }\n    });\n    \n    socket.on('new_round', (data) => {\n      if (!data) return;\n      setGameState('betting');\n      setPlayers(data.players || []);\n      setDealer(data.dealer || { cards: [], score: 0 });\n      \n      // Add system message\n      const autoNextMessage = data.isAutoSkip ? ' (Auto Next Round by host)' : '';\n      addMessage({\n        content: `New round started${autoNextMessage}. Place your bets!`,\n        type: 'system',\n        timestamp: Date.now()\n      });\n    });\n    \n    socket.on('message', (data) => {\n      addMessage(data);\n    });\n    \n    socket.on('leaderboard_updated', (data) => {\n      setLeaderboard(data.leaderboard);\n    });\n    \n    socket.on('player_split', (data) => {\n      if (!data) return;\n      setPlayers(data.players || []);\n      \n      addMessage({\n        content: `${data.players.find(p => p.id === data.playerId)?.username || 'Player'} split their hand`,\n        type: 'system',\n        timestamp: Date.now()\n      });\n    });\n    \n    return () => {\n      socket.off('game_started');\n      socket.off('betting_ended');\n      socket.off('card_dealt');\n      socket.off('player_turn');\n      socket.off('turn_ended');\n      socket.off('dealer_turn');\n      socket.off('game_ended');\n      socket.off('new_round');\n      socket.off('message');\n      socket.off('leaderboard_updated');\n      socket.off('player_split');\n    };\n  }, [socket, autoSkipNewRound]);\n  \n  // Game actions\n  const createRoom = (username, initialBalance = 1000) => {\n    if (!connected) return;\n    \n    setUsername(username);\n    setBalance(initialBalance);\n    socket.emit('create_room', { username, balance: initialBalance });\n  };\n  \n  const joinRoom = (roomId, username, initialBalance = 1000) => {\n    if (!connected) return;\n    \n    setUsername(username);\n    setBalance(initialBalance);\n    socket.emit('join_room', { roomId, username, balance: initialBalance });\n  };\n  \n  const startGame = () => {\n    if (!connected || !roomId) return;\n    \n    socket.emit('start_game', { roomId });\n  };\n  \n  const placeBet = (amount) => {\n    if (!connected || !roomId) return;\n    \n    socket.emit('place_bet', { roomId, amount });\n    setLastBet(amount);\n  };\n  \n  const hit = () => {\n    if (!connected || !roomId) return;\n    \n    // For split hands, we need to use the original player's socket ID\n    if (currentTurn && currentTurn.includes('-split')) {\n      const originalPlayerId = currentTurn.split('-')[0];\n      if (originalPlayerId === socket.id) {\n        socket.emit('hit', { roomId, handId: currentTurn });\n      }\n    } else if (currentTurn === socket.id) {\n      socket.emit('hit', { roomId });\n    }\n  };\n  \n  const stand = () => {\n    if (!connected || !roomId) return;\n    \n    // For split hands, we need to use the original player's socket ID\n    if (currentTurn && currentTurn.includes('-split')) {\n      const originalPlayerId = currentTurn.split('-')[0];\n      if (originalPlayerId === socket.id) {\n        socket.emit('stand', { roomId, handId: currentTurn });\n      }\n    } else if (currentTurn === socket.id) {\n      socket.emit('stand', { roomId });\n    }\n  };\n  \n  const doubleDown = () => {\n    if (!connected || !roomId) return;\n    \n    // For split hands, we need to use the original player's socket ID\n    if (currentTurn && currentTurn.includes('-split')) {\n      const originalPlayerId = currentTurn.split('-')[0];\n      if (originalPlayerId === socket.id) {\n        socket.emit('double_down', { roomId, handId: currentTurn });\n      }\n    } else if (currentTurn === socket.id) {\n      socket.emit('double_down', { roomId });\n    }\n  };\n  \n  const split = () => {\n    if (!connected || !roomId || currentTurn !== socket.id) return;\n    \n    // Can't split a split hand\n    if (currentTurn.includes('-split')) return;\n    \n    socket.emit('split', { roomId });\n  };\n  \n  const surrender = () => {\n    if (!connected || !roomId) return;\n    \n    // For split hands, we need to use the original player's socket ID\n    if (currentTurn && currentTurn.includes('-split')) {\n      const originalPlayerId = currentTurn.split('-')[0];\n      if (originalPlayerId === socket.id) {\n        socket.emit('surrender', { roomId, handId: currentTurn });\n      }\n    } else if (currentTurn === socket.id) {\n      socket.emit('surrender', { roomId });\n    }\n  };\n  \n  const startNewRound = () => {\n    if (!connected || !roomId) return;\n    \n    socket.emit('new_round', { roomId });\n  };\n  \n  const sendMessage = (message) => {\n    if (!connected || !roomId) return;\n    \n    socket.emit('send_message', { roomId, message, sender: username });\n  };\n  \n  const leaveRoom = () => {\n    if (!connected || !roomId) return;\n    \n    socket.emit('leave_room', { roomId });\n    setRoomId(null);\n    setPlayers([]);\n    setDealer({ cards: [], score: 0 });\n    setGameState('waiting');\n    setCurrentTurn(null);\n    setMessages([]);\n  };\n  \n  // Check if it's current player's turn\n  const isPlayerTurn = () => {\n    if (!socket || !currentTurn) return false;\n    \n    // Direct match with player's socket ID\n    if (currentTurn === socket.id) return true;\n    \n    // Check if it's the player's split hand turn\n    // Split hands have IDs in the format: originalPlayerId-split\n    if (currentTurn.includes('-split')) {\n      const originalPlayerId = currentTurn.split('-')[0];\n      return originalPlayerId === socket.id;\n    }\n    \n    return false;\n  };\n  \n  // Find the current player\n  const getCurrentPlayer = () => {\n    if (!socket || !players) return null;\n    \n    // First check for the player's main hand\n    const player = players.find(p => p.id === socket.id);\n    \n    // If it's the player's split hand turn, return that hand instead\n    if (currentTurn && currentTurn.includes('-split')) {\n      const splitHand = players.find(p => p.id === currentTurn);\n      if (splitHand && splitHand.originalPlayer === socket.id) {\n        return splitHand;\n      }\n    }\n    \n    return player;\n  };\n  \n  // Toggle hints\n  const toggleHints = () => {\n    setHintsEnabled(prev => !prev);\n  };\n\n  return (\n    <GameContext.Provider\n      value={{\n        connected,\n        username,\n        balance,\n        roomId,\n        players,\n        dealer,\n        gameState,\n        currentTurn,\n        messages,\n        error,\n        gameHistory,\n        leaderboard,\n        lastBet,\n        hintsEnabled,\n        autoSkipNewRound,\n        createRoom,\n        joinRoom,\n        startGame,\n        placeBet,\n        hit,\n        stand,\n        doubleDown,\n        split,\n        surrender,\n        startNewRound,\n        sendMessage,\n        leaveRoom,\n        isPlayerTurn,\n        getCurrentPlayer,\n        toggleHints,\n        setAutoSkipNewRound\n      }}\n    >\n      {children}\n    </GameContext.Provider>\n  );\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}