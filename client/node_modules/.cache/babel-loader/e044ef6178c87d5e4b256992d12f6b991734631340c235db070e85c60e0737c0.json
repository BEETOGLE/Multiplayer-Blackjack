{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\twj23\\\\Desktop\\\\Developer\\\\Games\\\\Multiplayer Blackjack Copy\\\\client\\\\src\\\\contexts\\\\GameContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { io } from 'socket.io-client';\nimport { useNavigate } from 'react-router-dom';\nimport { SOCKET_SERVER } from '../config';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const GameContext = /*#__PURE__*/createContext();\nexport const useGame = () => {\n  _s();\n  return useContext(GameContext);\n};\n_s(useGame, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const GameProvider = ({\n  children\n}) => {\n  _s2();\n  const [socket, setSocket] = useState(null);\n  const [connected, setConnected] = useState(false);\n  const [username, setUsername] = useState('');\n  const [balance, setBalance] = useState(1000);\n  const [roomId, setRoomId] = useState(null);\n  const [players, setPlayers] = useState([]);\n  const [dealer, setDealer] = useState({\n    cards: [],\n    score: 0\n  });\n  const [gameState, setGameState] = useState('waiting');\n  const [currentTurn, setCurrentTurn] = useState(null);\n  const [messages, setMessages] = useState([]);\n  const [error, setError] = useState(null);\n  const [gameHistory, setGameHistory] = useState([]);\n  const [leaderboard, setLeaderboard] = useState([]);\n  const [lastBet, setLastBet] = useState(0);\n  const [hintsEnabled, setHintsEnabled] = useState(true);\n  const [autoSkipNewRound, setAutoSkipNewRound] = useState(true);\n  const navigate = useNavigate();\n\n  // Helper function to add messages to the chat\n  const addMessage = message => {\n    setMessages(prevMessages => [...prevMessages, message]);\n  };\n\n  // Define startNewRound function before it's used in useEffect\n  const startNewRound = () => {\n    if (!connected) {\n      console.error(\"Cannot start new round: Not connected to server\");\n      return;\n    }\n    if (!roomId) {\n      console.error(\"Cannot start new round: No room ID\");\n      return;\n    }\n    if (!socket) {\n      console.error(\"Cannot start new round: Socket not initialized\");\n      return;\n    }\n    console.log(`Emitting new_round event for room ${roomId}`);\n    socket.emit('new_round', {\n      roomId\n    });\n  };\n\n  // Connect to socket server\n  useEffect(() => {\n    const newSocket = io(SOCKET_SERVER);\n    newSocket.on('connect', () => {\n      setSocket(newSocket);\n      setConnected(true);\n      console.log('Connected to server');\n    });\n    newSocket.on('disconnect', () => {\n      setConnected(false);\n      console.log('Disconnected from server');\n    });\n    newSocket.on('error', data => {\n      setError(data.message);\n      setTimeout(() => setError(null), 5000);\n    });\n    return () => {\n      newSocket.disconnect();\n    };\n  }, []);\n\n  // Handle room events\n  useEffect(() => {\n    if (!socket) return;\n    socket.on('room_joined', data => {\n      if (!data) return;\n      setRoomId(data.roomId);\n      setPlayers(data.players || []);\n      setGameState(data.gameState || 'waiting');\n      setError(null);\n\n      // Add system message\n      const playerNames = data.players ? data.players.map(p => p.username).join(', ') : '';\n      addMessage({\n        content: `Room joined. Current players: ${playerNames}`,\n        type: 'system',\n        timestamp: Date.now()\n      });\n\n      // Navigate to game room after successful join\n      navigate('/game-room');\n    });\n    socket.on('player_joined', data => {\n      if (!data || !data.players) return;\n      setPlayers(data.players);\n\n      // Add system message about new player\n      const newPlayer = data.players[data.players.length - 1];\n      if (newPlayer) {\n        addMessage({\n          content: `${newPlayer.username} joined the room`,\n          type: 'system',\n          timestamp: Date.now()\n        });\n      }\n    });\n    socket.on('player_left', data => {\n      if (!data) return;\n      setPlayers(data.players || []);\n\n      // Add system message about player leaving\n      if (data.leftPlayer) {\n        addMessage({\n          content: `${data.leftPlayer} left the room`,\n          type: 'system',\n          timestamp: Date.now()\n        });\n      }\n    });\n    return () => {\n      socket.off('room_joined');\n      socket.off('player_joined');\n      socket.off('player_left');\n    };\n  }, [socket, navigate]);\n\n  // Handle game events\n  useEffect(() => {\n    if (!socket) return;\n    socket.on('game_started', data => {\n      if (!data) return;\n      setGameState('betting');\n      setDealer(data.dealer || {\n        cards: [],\n        score: 0\n      });\n      setPlayers(data.players || []);\n      addMessage({\n        content: 'Game started! Place your bets.',\n        type: 'system',\n        timestamp: Date.now()\n      });\n    });\n    socket.on('betting_ended', data => {\n      if (!data) return;\n      setPlayers(data.players || []);\n      setGameState('playing');\n      addMessage({\n        content: 'All bets placed. Game is starting...',\n        type: 'system',\n        timestamp: Date.now()\n      });\n    });\n    socket.on('player_turn', data => {\n      setCurrentTurn(data.playerId);\n      const player = data.players && data.players.find(p => p.id === data.playerId);\n      addMessage({\n        content: `It's ${player ? player.username : 'unknown player'}'s turn`,\n        type: 'system',\n        timestamp: Date.now()\n      });\n    });\n    socket.on('card_dealt', data => {\n      if (!data) return;\n      if (data.to === 'dealer') {\n        setDealer(data.dealer || {\n          cards: [],\n          score: 0\n        });\n      } else if (data.to && data.cards) {\n        setPlayers(prev => prev.map(player => player.id === data.to ? {\n          ...player,\n          cards: data.cards,\n          score: data.score || 0\n        } : player));\n      }\n    });\n    socket.on('turn_ended', data => {\n      if (!data) return;\n      setCurrentTurn(data.nextTurn);\n      setPlayers(data.players || []);\n    });\n    socket.on('dealer_turn', () => {\n      setCurrentTurn('dealer');\n      addMessage({\n        content: `Dealer's turn`,\n        type: 'system',\n        timestamp: Date.now()\n      });\n    });\n    socket.on('game_ended', data => {\n      var _data$result, _data$result2, _data$result3, _data$result4, _data$result5, _players$;\n      if (!data) return;\n      console.log('[GameContext] Received game_ended event with data:', data);\n      console.log('[GameContext] Players with crown status:');\n      if (data.players) {\n        data.players.forEach(player => {\n          console.log(`- ${player.username}: hasCrown = ${player.hasCrown || false}`);\n        });\n      }\n      setGameState('ended');\n      setDealer(data.dealer || {\n        cards: [],\n        score: 0\n      });\n      setPlayers(data.players || []);\n      setCurrentTurn(null);\n\n      // Update game history\n      const historyEntry = {\n        id: Date.now(),\n        dealer: data.dealer,\n        players: data.players,\n        results: ((_data$result = data.result) === null || _data$result === void 0 ? void 0 : _data$result.results) || [],\n        timestamp: Date.now()\n      };\n      setGameHistory(prev => [historyEntry, ...prev].slice(0, 10));\n\n      // Add system message\n      let resultMessage = 'Round ended. Check your results!';\n\n      // Special conditions messages\n      if ((_data$result2 = data.result) !== null && _data$result2 !== void 0 && _data$result2.onlyOnePlayerLeft) {\n        const lastPlayer = data.result.lastPlayerStanding;\n        resultMessage = `${lastPlayer} is the last player standing! They've been crowned the winner! Starting new round in 3 seconds...`;\n      } else if ((_data$result3 = data.result) !== null && _data$result3 !== void 0 && _data$result3.allSpectating) {\n        resultMessage = `All players are spectating! Starting new round in 3 seconds...`;\n      } else if (data.result && data.result.results) {\n        const resultSummary = data.result.results.map(r => `${r.username}: ${r.outcome} (${r.amountChange >= 0 ? '+' : ''}${r.amountChange})`).join(', ');\n        resultMessage = `Round ended. Results: ${resultSummary}`;\n      }\n      addMessage({\n        content: resultMessage,\n        type: 'system',\n        timestamp: Date.now()\n      });\n\n      // If host has auto-next round enabled, automatically start a new round immediately\n      // (but only if we're not already auto-starting due to special conditions)\n      if (!((_data$result4 = data.result) !== null && _data$result4 !== void 0 && _data$result4.onlyOnePlayerLeft) && !((_data$result5 = data.result) !== null && _data$result5 !== void 0 && _data$result5.allSpectating) && autoSkipNewRound && socket.id === ((_players$ = players[0]) === null || _players$ === void 0 ? void 0 : _players$.id)) {\n        var _players$2;\n        console.log(\"Auto next round enabled, starting new round immediately\");\n        console.log(\"Current socket ID:\", socket.id);\n        console.log(\"Host ID (players[0].id):\", (_players$2 = players[0]) === null || _players$2 === void 0 ? void 0 : _players$2.id);\n        console.log(\"autoSkipNewRound value:\", autoSkipNewRound);\n        startNewRound();\n      } else {\n        var _data$result6, _data$result7, _players$3, _players$4;\n        console.log(\"Auto next round not triggered because:\");\n        console.log(\"- Special condition:\", ((_data$result6 = data.result) === null || _data$result6 === void 0 ? void 0 : _data$result6.onlyOnePlayerLeft) || ((_data$result7 = data.result) === null || _data$result7 === void 0 ? void 0 : _data$result7.allSpectating));\n        console.log(\"- autoSkipNewRound:\", autoSkipNewRound);\n        console.log(\"- Is current player the host:\", socket.id === ((_players$3 = players[0]) === null || _players$3 === void 0 ? void 0 : _players$3.id));\n        console.log(\"- Current socket ID:\", socket.id);\n        console.log(\"- Host ID (players[0].id):\", (_players$4 = players[0]) === null || _players$4 === void 0 ? void 0 : _players$4.id);\n      }\n    });\n    socket.on('new_round', data => {\n      if (!data) return;\n      console.log('[GameContext] Received new_round event with data:', data);\n      console.log('[GameContext] Players with crown status in new round:');\n      if (data.players) {\n        data.players.forEach(player => {\n          console.log(`- ${player.username}: hasCrown = ${player.hasCrown || false}`);\n        });\n      }\n      setGameState('betting');\n      setPlayers(data.players || []);\n      setDealer({\n        cards: [],\n        score: 0\n      });\n      setCurrentTurn(null);\n\n      // Add system message\n      let message = 'New round started! Place your bets.';\n      if (data.isAutoSkip) {\n        message = 'New round automatically started! Place your bets.';\n      }\n      addMessage({\n        content: message,\n        type: 'system',\n        timestamp: Date.now()\n      });\n    });\n    socket.on('message', data => {\n      addMessage(data);\n    });\n    socket.on('leaderboard_updated', data => {\n      setLeaderboard(data.leaderboard);\n    });\n    socket.on('player_split', data => {\n      var _data$players$find;\n      if (!data) return;\n      setPlayers(data.players || []);\n      addMessage({\n        content: `${((_data$players$find = data.players.find(p => p.id === data.playerId)) === null || _data$players$find === void 0 ? void 0 : _data$players$find.username) || 'Player'} split their hand`,\n        type: 'system',\n        timestamp: Date.now()\n      });\n    });\n\n    // Handle player spectating event\n    socket.on('player_spectating', data => {\n      if (!data) return;\n\n      // Update the player's status in the players array\n      setPlayers(prev => prev.map(player => player.id === data.playerId ? {\n        ...player,\n        status: 'spectating'\n      } : player));\n      addMessage({\n        content: `${data.username} is now spectating the game`,\n        type: 'system',\n        timestamp: Date.now()\n      });\n      console.log(`Player ${data.username} is now spectating`);\n    });\n    return () => {\n      socket.off('game_started');\n      socket.off('betting_ended');\n      socket.off('card_dealt');\n      socket.off('player_turn');\n      socket.off('turn_ended');\n      socket.off('dealer_turn');\n      socket.off('game_ended');\n      socket.off('new_round');\n      socket.off('message');\n      socket.off('leaderboard_updated');\n      socket.off('player_split');\n      socket.off('player_spectating');\n    };\n  }, [socket, autoSkipNewRound, players, startNewRound]);\n\n  // Game actions\n  const createRoom = (username, initialBalance = 1000) => {\n    if (!connected) return;\n    setUsername(username);\n    setBalance(initialBalance);\n    socket.emit('create_room', {\n      username,\n      balance: initialBalance\n    });\n  };\n  const joinRoom = (roomId, username, initialBalance = 1000) => {\n    if (!connected) return;\n    setUsername(username);\n    setBalance(initialBalance);\n    socket.emit('join_room', {\n      roomId,\n      username,\n      balance: initialBalance\n    });\n  };\n  const startGame = () => {\n    if (!connected || !roomId) return;\n    socket.emit('start_game', {\n      roomId\n    });\n  };\n  const placeBet = amount => {\n    if (!connected || !roomId) return;\n    socket.emit('place_bet', {\n      roomId,\n      amount\n    });\n    setLastBet(amount);\n  };\n  const hit = () => {\n    if (!connected || !roomId) return;\n\n    // For split hands, we need to use the original player's socket ID\n    if (currentTurn && currentTurn.includes('-split')) {\n      const originalPlayerId = currentTurn.split('-')[0];\n      if (originalPlayerId === socket.id) {\n        socket.emit('hit', {\n          roomId,\n          handId: currentTurn\n        });\n      }\n    } else if (currentTurn === socket.id) {\n      socket.emit('hit', {\n        roomId\n      });\n    }\n  };\n  const stand = () => {\n    if (!connected || !roomId) return;\n\n    // For split hands, we need to use the original player's socket ID\n    if (currentTurn && currentTurn.includes('-split')) {\n      const originalPlayerId = currentTurn.split('-')[0];\n      if (originalPlayerId === socket.id) {\n        socket.emit('stand', {\n          roomId,\n          handId: currentTurn\n        });\n      }\n    } else if (currentTurn === socket.id) {\n      socket.emit('stand', {\n        roomId\n      });\n    }\n  };\n  const doubleDown = () => {\n    if (!connected || !roomId) return;\n\n    // For split hands, we need to use the original player's socket ID\n    if (currentTurn && currentTurn.includes('-split')) {\n      const originalPlayerId = currentTurn.split('-')[0];\n      if (originalPlayerId === socket.id) {\n        socket.emit('double_down', {\n          roomId,\n          handId: currentTurn\n        });\n      }\n    } else if (currentTurn === socket.id) {\n      socket.emit('double_down', {\n        roomId\n      });\n    }\n  };\n  const split = () => {\n    if (!connected || !roomId || currentTurn !== socket.id) return;\n\n    // Can't split a split hand\n    if (currentTurn.includes('-split')) return;\n    socket.emit('split', {\n      roomId\n    });\n  };\n  const surrender = () => {\n    if (!connected || !roomId) return;\n\n    // For split hands, we need to use the original player's socket ID\n    if (currentTurn && currentTurn.includes('-split')) {\n      const originalPlayerId = currentTurn.split('-')[0];\n      if (originalPlayerId === socket.id) {\n        socket.emit('surrender', {\n          roomId,\n          handId: currentTurn\n        });\n      }\n    } else if (currentTurn === socket.id) {\n      socket.emit('surrender', {\n        roomId\n      });\n    }\n  };\n  const sendMessage = message => {\n    if (!connected || !roomId) return;\n    socket.emit('send_message', {\n      roomId,\n      message,\n      sender: username\n    });\n  };\n  const leaveRoom = () => {\n    if (!connected || !roomId) return;\n    socket.emit('leave_room', {\n      roomId\n    });\n    setRoomId(null);\n    setPlayers([]);\n    setDealer({\n      cards: [],\n      score: 0\n    });\n    setGameState('waiting');\n    setCurrentTurn(null);\n    setMessages([]);\n  };\n\n  // Check if it's current player's turn\n  const isPlayerTurn = () => {\n    if (!socket || !currentTurn) return false;\n\n    // Direct match with player's socket ID\n    if (currentTurn === socket.id) return true;\n\n    // Check if it's the player's split hand turn\n    // Split hands have IDs in the format: originalPlayerId-split\n    if (currentTurn.includes('-split')) {\n      const originalPlayerId = currentTurn.split('-')[0];\n      return originalPlayerId === socket.id;\n    }\n    return false;\n  };\n\n  // Find the current player\n  const getCurrentPlayer = () => {\n    if (!socket || !players) return null;\n\n    // First check for the player's main hand\n    const player = players.find(p => p.id === socket.id);\n\n    // If it's the player's split hand turn, return that hand instead\n    if (currentTurn && currentTurn.includes('-split')) {\n      const splitHand = players.find(p => p.id === currentTurn);\n      if (splitHand && splitHand.originalPlayer === socket.id) {\n        return splitHand;\n      }\n    }\n    return player;\n  };\n\n  // Toggle hints\n  const toggleHints = () => {\n    setHintsEnabled(prev => !prev);\n  };\n  return /*#__PURE__*/_jsxDEV(GameContext.Provider, {\n    value: {\n      connected,\n      username,\n      balance,\n      roomId,\n      players,\n      dealer,\n      gameState,\n      currentTurn,\n      messages,\n      error,\n      gameHistory,\n      leaderboard,\n      lastBet,\n      hintsEnabled,\n      autoSkipNewRound,\n      createRoom,\n      joinRoom,\n      startGame,\n      placeBet,\n      hit,\n      stand,\n      doubleDown,\n      split,\n      surrender,\n      startNewRound,\n      sendMessage,\n      leaveRoom,\n      isPlayerTurn,\n      getCurrentPlayer,\n      toggleHints,\n      setAutoSkipNewRound\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 516,\n    columnNumber: 5\n  }, this);\n};\n_s2(GameProvider, \"rBSg6kpqc4XW5GZFgugIY2QxaJI=\", false, function () {\n  return [useNavigate];\n});\n_c = GameProvider;\nvar _c;\n$RefreshReg$(_c, \"GameProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","io","useNavigate","SOCKET_SERVER","jsxDEV","_jsxDEV","GameContext","useGame","_s","GameProvider","children","_s2","socket","setSocket","connected","setConnected","username","setUsername","balance","setBalance","roomId","setRoomId","players","setPlayers","dealer","setDealer","cards","score","gameState","setGameState","currentTurn","setCurrentTurn","messages","setMessages","error","setError","gameHistory","setGameHistory","leaderboard","setLeaderboard","lastBet","setLastBet","hintsEnabled","setHintsEnabled","autoSkipNewRound","setAutoSkipNewRound","navigate","addMessage","message","prevMessages","startNewRound","console","log","emit","newSocket","on","data","setTimeout","disconnect","playerNames","map","p","join","content","type","timestamp","Date","now","newPlayer","length","leftPlayer","off","playerId","player","find","id","to","prev","nextTurn","_data$result","_data$result2","_data$result3","_data$result4","_data$result5","_players$","forEach","hasCrown","historyEntry","results","result","slice","resultMessage","onlyOnePlayerLeft","lastPlayer","lastPlayerStanding","allSpectating","resultSummary","r","outcome","amountChange","_players$2","_data$result6","_data$result7","_players$3","_players$4","isAutoSkip","_data$players$find","status","createRoom","initialBalance","joinRoom","startGame","placeBet","amount","hit","includes","originalPlayerId","split","handId","stand","doubleDown","surrender","sendMessage","sender","leaveRoom","isPlayerTurn","getCurrentPlayer","splitHand","originalPlayer","toggleHints","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/twj23/Desktop/Developer/Games/Multiplayer Blackjack Copy/client/src/contexts/GameContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\nimport { io } from 'socket.io-client';\nimport { useNavigate } from 'react-router-dom';\nimport { SOCKET_SERVER } from '../config';\n\nexport const GameContext = createContext();\n\nexport const useGame = () => useContext(GameContext);\n\nexport const GameProvider = ({ children }) => {\n  const [socket, setSocket] = useState(null);\n  const [connected, setConnected] = useState(false);\n  const [username, setUsername] = useState('');\n  const [balance, setBalance] = useState(1000);\n  const [roomId, setRoomId] = useState(null);\n  const [players, setPlayers] = useState([]);\n  const [dealer, setDealer] = useState({ cards: [], score: 0 });\n  const [gameState, setGameState] = useState('waiting');\n  const [currentTurn, setCurrentTurn] = useState(null);\n  const [messages, setMessages] = useState([]);\n  const [error, setError] = useState(null);\n  const [gameHistory, setGameHistory] = useState([]);\n  const [leaderboard, setLeaderboard] = useState([]);\n  const [lastBet, setLastBet] = useState(0);\n  const [hintsEnabled, setHintsEnabled] = useState(true);\n  const [autoSkipNewRound, setAutoSkipNewRound] = useState(true);\n  const navigate = useNavigate();\n\n  // Helper function to add messages to the chat\n  const addMessage = (message) => {\n    setMessages(prevMessages => [...prevMessages, message]);\n  };\n\n  // Define startNewRound function before it's used in useEffect\n  const startNewRound = () => {\n    if (!connected) {\n      console.error(\"Cannot start new round: Not connected to server\");\n      return;\n    }\n    \n    if (!roomId) {\n      console.error(\"Cannot start new round: No room ID\");\n      return;\n    }\n    \n    if (!socket) {\n      console.error(\"Cannot start new round: Socket not initialized\");\n      return;\n    }\n    \n    console.log(`Emitting new_round event for room ${roomId}`);\n    socket.emit('new_round', { roomId });\n  };\n\n  // Connect to socket server\n  useEffect(() => {\n    const newSocket = io(SOCKET_SERVER);\n    \n    newSocket.on('connect', () => {\n      setSocket(newSocket);\n      setConnected(true);\n      console.log('Connected to server');\n    });\n    \n    newSocket.on('disconnect', () => {\n      setConnected(false);\n      console.log('Disconnected from server');\n    });\n    \n    newSocket.on('error', (data) => {\n      setError(data.message);\n      setTimeout(() => setError(null), 5000);\n    });\n    \n    return () => {\n      newSocket.disconnect();\n    };\n  }, []);\n  \n  // Handle room events\n  useEffect(() => {\n    if (!socket) return;\n    \n    socket.on('room_joined', (data) => {\n      if (!data) return;\n      setRoomId(data.roomId);\n      setPlayers(data.players || []);\n      setGameState(data.gameState || 'waiting');\n      setError(null);\n      \n      // Add system message\n      const playerNames = data.players ? data.players.map(p => p.username).join(', ') : '';\n      addMessage({\n        content: `Room joined. Current players: ${playerNames}`,\n        type: 'system',\n        timestamp: Date.now()\n      });\n\n      // Navigate to game room after successful join\n      navigate('/game-room');\n    });\n    \n    socket.on('player_joined', (data) => {\n      if (!data || !data.players) return;\n      setPlayers(data.players);\n      \n      // Add system message about new player\n      const newPlayer = data.players[data.players.length - 1];\n      if (newPlayer) {\n        addMessage({\n          content: `${newPlayer.username} joined the room`,\n          type: 'system',\n          timestamp: Date.now()\n        });\n      }\n    });\n    \n    socket.on('player_left', (data) => {\n      if (!data) return;\n      setPlayers(data.players || []);\n      \n      // Add system message about player leaving\n      if (data.leftPlayer) {\n        addMessage({\n          content: `${data.leftPlayer} left the room`,\n          type: 'system',\n          timestamp: Date.now()\n        });\n      }\n    });\n    \n    return () => {\n      socket.off('room_joined');\n      socket.off('player_joined');\n      socket.off('player_left');\n    };\n  }, [socket, navigate]);\n  \n  // Handle game events\n  useEffect(() => {\n    if (!socket) return;\n    \n    socket.on('game_started', (data) => {\n      if (!data) return;\n      setGameState('betting');\n      setDealer(data.dealer || { cards: [], score: 0 });\n      setPlayers(data.players || []);\n      \n      addMessage({\n        content: 'Game started! Place your bets.',\n        type: 'system',\n        timestamp: Date.now()\n      });\n    });\n    \n    socket.on('betting_ended', (data) => {\n      if (!data) return;\n      setPlayers(data.players || []);\n      setGameState('playing');\n      \n      addMessage({\n        content: 'All bets placed. Game is starting...',\n        type: 'system',\n        timestamp: Date.now()\n      });\n    });\n    \n    socket.on('player_turn', (data) => {\n      setCurrentTurn(data.playerId);\n      \n      const player = data.players && data.players.find(p => p.id === data.playerId);\n      \n      addMessage({\n        content: `It's ${player ? player.username : 'unknown player'}'s turn`,\n        type: 'system',\n        timestamp: Date.now()\n      });\n    });\n    \n    socket.on('card_dealt', (data) => {\n      if (!data) return;\n      if (data.to === 'dealer') {\n        setDealer(data.dealer || { cards: [], score: 0 });\n      } else if (data.to && data.cards) {\n        setPlayers(prev => \n          prev.map(player => \n            player.id === data.to ? { ...player, cards: data.cards, score: data.score || 0 } : player\n          )\n        );\n      }\n    });\n    \n    socket.on('turn_ended', (data) => {\n      if (!data) return;\n      setCurrentTurn(data.nextTurn);\n      setPlayers(data.players || []);\n    });\n    \n    socket.on('dealer_turn', () => {\n      setCurrentTurn('dealer');\n      \n      addMessage({\n        content: `Dealer's turn`,\n        type: 'system',\n        timestamp: Date.now()\n      });\n    });\n    \n    socket.on('game_ended', (data) => {\n      if (!data) return;\n      \n      console.log('[GameContext] Received game_ended event with data:', data);\n      console.log('[GameContext] Players with crown status:');\n      if (data.players) {\n        data.players.forEach(player => {\n          console.log(`- ${player.username}: hasCrown = ${player.hasCrown || false}`);\n        });\n      }\n      \n      setGameState('ended');\n      setDealer(data.dealer || { cards: [], score: 0 });\n      setPlayers(data.players || []);\n      setCurrentTurn(null);\n      \n      // Update game history\n      const historyEntry = {\n        id: Date.now(),\n        dealer: data.dealer,\n        players: data.players,\n        results: data.result?.results || [],\n        timestamp: Date.now()\n      };\n      setGameHistory(prev => [historyEntry, ...prev].slice(0, 10));\n      \n      // Add system message\n      let resultMessage = 'Round ended. Check your results!';\n      \n      // Special conditions messages\n      if (data.result?.onlyOnePlayerLeft) {\n        const lastPlayer = data.result.lastPlayerStanding;\n        resultMessage = `${lastPlayer} is the last player standing! They've been crowned the winner! Starting new round in 3 seconds...`;\n      } else if (data.result?.allSpectating) {\n        resultMessage = `All players are spectating! Starting new round in 3 seconds...`;\n      } else if (data.result && data.result.results) {\n        const resultSummary = data.result.results\n          .map(r => `${r.username}: ${r.outcome} (${r.amountChange >= 0 ? '+' : ''}${r.amountChange})`)\n          .join(', ');\n        resultMessage = `Round ended. Results: ${resultSummary}`;\n      }\n      \n      addMessage({\n        content: resultMessage,\n        type: 'system',\n        timestamp: Date.now()\n      });\n      \n      // If host has auto-next round enabled, automatically start a new round immediately\n      // (but only if we're not already auto-starting due to special conditions)\n      if (!data.result?.onlyOnePlayerLeft && !data.result?.allSpectating && \n          autoSkipNewRound && socket.id === players[0]?.id) {\n        console.log(\"Auto next round enabled, starting new round immediately\");\n        console.log(\"Current socket ID:\", socket.id);\n        console.log(\"Host ID (players[0].id):\", players[0]?.id);\n        console.log(\"autoSkipNewRound value:\", autoSkipNewRound);\n        startNewRound();\n      } else {\n        console.log(\"Auto next round not triggered because:\");\n        console.log(\"- Special condition:\", data.result?.onlyOnePlayerLeft || data.result?.allSpectating);\n        console.log(\"- autoSkipNewRound:\", autoSkipNewRound);\n        console.log(\"- Is current player the host:\", socket.id === players[0]?.id);\n        console.log(\"- Current socket ID:\", socket.id);\n        console.log(\"- Host ID (players[0].id):\", players[0]?.id);\n      }\n    });\n    \n    socket.on('new_round', (data) => {\n      if (!data) return;\n      \n      console.log('[GameContext] Received new_round event with data:', data);\n      console.log('[GameContext] Players with crown status in new round:');\n      if (data.players) {\n        data.players.forEach(player => {\n          console.log(`- ${player.username}: hasCrown = ${player.hasCrown || false}`);\n        });\n      }\n      \n      setGameState('betting');\n      setPlayers(data.players || []);\n      setDealer({ cards: [], score: 0 });\n      setCurrentTurn(null);\n      \n      // Add system message\n      let message = 'New round started! Place your bets.';\n      if (data.isAutoSkip) {\n        message = 'New round automatically started! Place your bets.';\n      }\n      \n      addMessage({\n        content: message,\n        type: 'system',\n        timestamp: Date.now()\n      });\n    });\n    \n    socket.on('message', (data) => {\n      addMessage(data);\n    });\n    \n    socket.on('leaderboard_updated', (data) => {\n      setLeaderboard(data.leaderboard);\n    });\n    \n    socket.on('player_split', (data) => {\n      if (!data) return;\n      setPlayers(data.players || []);\n      \n      addMessage({\n        content: `${data.players.find(p => p.id === data.playerId)?.username || 'Player'} split their hand`,\n        type: 'system',\n        timestamp: Date.now()\n      });\n    });\n    \n    // Handle player spectating event\n    socket.on('player_spectating', (data) => {\n      if (!data) return;\n      \n      // Update the player's status in the players array\n      setPlayers(prev => \n        prev.map(player => \n          player.id === data.playerId \n            ? { ...player, status: 'spectating' } \n            : player\n        )\n      );\n      \n      addMessage({\n        content: `${data.username} is now spectating the game`,\n        type: 'system',\n        timestamp: Date.now()\n      });\n      \n      console.log(`Player ${data.username} is now spectating`);\n    });\n    \n    return () => {\n      socket.off('game_started');\n      socket.off('betting_ended');\n      socket.off('card_dealt');\n      socket.off('player_turn');\n      socket.off('turn_ended');\n      socket.off('dealer_turn');\n      socket.off('game_ended');\n      socket.off('new_round');\n      socket.off('message');\n      socket.off('leaderboard_updated');\n      socket.off('player_split');\n      socket.off('player_spectating');\n    };\n  }, [socket, autoSkipNewRound, players, startNewRound]);\n  \n  // Game actions\n  const createRoom = (username, initialBalance = 1000) => {\n    if (!connected) return;\n    \n    setUsername(username);\n    setBalance(initialBalance);\n    socket.emit('create_room', { username, balance: initialBalance });\n  };\n  \n  const joinRoom = (roomId, username, initialBalance = 1000) => {\n    if (!connected) return;\n    \n    setUsername(username);\n    setBalance(initialBalance);\n    socket.emit('join_room', { roomId, username, balance: initialBalance });\n  };\n  \n  const startGame = () => {\n    if (!connected || !roomId) return;\n    \n    socket.emit('start_game', { roomId });\n  };\n  \n  const placeBet = (amount) => {\n    if (!connected || !roomId) return;\n    \n    socket.emit('place_bet', { roomId, amount });\n    setLastBet(amount);\n  };\n  \n  const hit = () => {\n    if (!connected || !roomId) return;\n    \n    // For split hands, we need to use the original player's socket ID\n    if (currentTurn && currentTurn.includes('-split')) {\n      const originalPlayerId = currentTurn.split('-')[0];\n      if (originalPlayerId === socket.id) {\n        socket.emit('hit', { roomId, handId: currentTurn });\n      }\n    } else if (currentTurn === socket.id) {\n      socket.emit('hit', { roomId });\n    }\n  };\n  \n  const stand = () => {\n    if (!connected || !roomId) return;\n    \n    // For split hands, we need to use the original player's socket ID\n    if (currentTurn && currentTurn.includes('-split')) {\n      const originalPlayerId = currentTurn.split('-')[0];\n      if (originalPlayerId === socket.id) {\n        socket.emit('stand', { roomId, handId: currentTurn });\n      }\n    } else if (currentTurn === socket.id) {\n      socket.emit('stand', { roomId });\n    }\n  };\n  \n  const doubleDown = () => {\n    if (!connected || !roomId) return;\n    \n    // For split hands, we need to use the original player's socket ID\n    if (currentTurn && currentTurn.includes('-split')) {\n      const originalPlayerId = currentTurn.split('-')[0];\n      if (originalPlayerId === socket.id) {\n        socket.emit('double_down', { roomId, handId: currentTurn });\n      }\n    } else if (currentTurn === socket.id) {\n      socket.emit('double_down', { roomId });\n    }\n  };\n  \n  const split = () => {\n    if (!connected || !roomId || currentTurn !== socket.id) return;\n    \n    // Can't split a split hand\n    if (currentTurn.includes('-split')) return;\n    \n    socket.emit('split', { roomId });\n  };\n  \n  const surrender = () => {\n    if (!connected || !roomId) return;\n    \n    // For split hands, we need to use the original player's socket ID\n    if (currentTurn && currentTurn.includes('-split')) {\n      const originalPlayerId = currentTurn.split('-')[0];\n      if (originalPlayerId === socket.id) {\n        socket.emit('surrender', { roomId, handId: currentTurn });\n      }\n    } else if (currentTurn === socket.id) {\n      socket.emit('surrender', { roomId });\n    }\n  };\n  \n  const sendMessage = (message) => {\n    if (!connected || !roomId) return;\n    \n    socket.emit('send_message', { roomId, message, sender: username });\n  };\n  \n  const leaveRoom = () => {\n    if (!connected || !roomId) return;\n    \n    socket.emit('leave_room', { roomId });\n    setRoomId(null);\n    setPlayers([]);\n    setDealer({ cards: [], score: 0 });\n    setGameState('waiting');\n    setCurrentTurn(null);\n    setMessages([]);\n  };\n  \n  // Check if it's current player's turn\n  const isPlayerTurn = () => {\n    if (!socket || !currentTurn) return false;\n    \n    // Direct match with player's socket ID\n    if (currentTurn === socket.id) return true;\n    \n    // Check if it's the player's split hand turn\n    // Split hands have IDs in the format: originalPlayerId-split\n    if (currentTurn.includes('-split')) {\n      const originalPlayerId = currentTurn.split('-')[0];\n      return originalPlayerId === socket.id;\n    }\n    \n    return false;\n  };\n  \n  // Find the current player\n  const getCurrentPlayer = () => {\n    if (!socket || !players) return null;\n    \n    // First check for the player's main hand\n    const player = players.find(p => p.id === socket.id);\n    \n    // If it's the player's split hand turn, return that hand instead\n    if (currentTurn && currentTurn.includes('-split')) {\n      const splitHand = players.find(p => p.id === currentTurn);\n      if (splitHand && splitHand.originalPlayer === socket.id) {\n        return splitHand;\n      }\n    }\n    \n    return player;\n  };\n  \n  // Toggle hints\n  const toggleHints = () => {\n    setHintsEnabled(prev => !prev);\n  };\n\n  return (\n    <GameContext.Provider\n      value={{\n        connected,\n        username,\n        balance,\n        roomId,\n        players,\n        dealer,\n        gameState,\n        currentTurn,\n        messages,\n        error,\n        gameHistory,\n        leaderboard,\n        lastBet,\n        hintsEnabled,\n        autoSkipNewRound,\n        createRoom,\n        joinRoom,\n        startGame,\n        placeBet,\n        hit,\n        stand,\n        doubleDown,\n        split,\n        surrender,\n        startNewRound,\n        sendMessage,\n        leaveRoom,\n        isPlayerTurn,\n        getCurrentPlayer,\n        toggleHints,\n        setAutoSkipNewRound\n      }}\n    >\n      {children}\n    </GameContext.Provider>\n  );\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}