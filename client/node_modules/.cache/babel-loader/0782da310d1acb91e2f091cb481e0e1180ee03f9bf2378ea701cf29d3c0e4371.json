{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\twj23\\\\Desktop\\\\Developer\\\\Games\\\\Multiplayer Blackjack Copy\\\\client\\\\src\\\\components\\\\PlayerControls.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { useGame } from '../contexts/GameContext';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ControlsContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  width: 100%;\n  max-width: 600px;\n  margin: 0 auto;\n  padding: 1rem;\n  background-color: rgba(30, 30, 46, 0.8);\n  border-radius: 10px;\n  box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);\n`;\n_c = ControlsContainer;\nconst ActionsGrid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  gap: 10px;\n  width: 100%;\n  margin-bottom: 1rem;\n  \n  @media (max-width: 600px) {\n    grid-template-columns: repeat(2, 1fr);\n  }\n`;\n_c2 = ActionsGrid;\nconst ActionButton = styled.button`\n  padding: 0.8rem 0;\n  border-radius: 5px;\n  border: none;\n  font-size: 1rem;\n  font-weight: 600;\n  cursor: pointer;\n  transition: all 0.2s;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  \n  &:hover:not(:disabled) {\n    transform: translateY(-3px);\n  }\n  \n  &:disabled {\n    opacity: 0.5;\n    cursor: not-allowed;\n  }\n  \n  svg {\n    margin-bottom: 5px;\n    font-size: 1.2rem;\n  }\n`;\n_c3 = ActionButton;\nconst HitButton = styled(ActionButton)`\n  background-color: #4caf50;\n  color: white;\n`;\n_c4 = HitButton;\nconst StandButton = styled(ActionButton)`\n  background-color: #f44336;\n  color: white;\n`;\n_c5 = StandButton;\nconst DoubleButton = styled(ActionButton)`\n  background-color: #2196f3;\n  color: white;\n`;\n_c6 = DoubleButton;\nconst SplitButton = styled(ActionButton)`\n  background-color: #ff9800;\n  color: white;\n`;\n_c7 = SplitButton;\nconst SurrenderButton = styled(ActionButton)`\n  background-color: #9e9e9e;\n  color: white;\n`;\n_c8 = SurrenderButton;\nconst NewRoundButton = styled(ActionButton)`\n  background-color: #9c27b0;\n  color: white;\n  grid-column: span 2;\n`;\n_c9 = NewRoundButton;\nconst Icon = styled.span`\n  font-size: 1.5rem;\n  margin-bottom: 5px;\n`;\n_c10 = Icon;\nconst ButtonText = styled.span`\n  font-size: 0.9rem;\n`;\n_c11 = ButtonText;\nconst HintContainer = styled.div`\n  background-color: rgba(226, 183, 20, 0.9);\n  color: #000;\n  padding: 15px;\n  border-radius: 5px;\n  margin-bottom: 15px;\n  font-weight: 600;\n  text-align: center;\n  animation: fadeIn 0.5s ease-in;\n  position: relative;\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);\n  max-width: 90%;\n  margin-left: auto;\n  margin-right: auto;\n  \n  @keyframes fadeIn {\n    from { opacity: 0; }\n    to { opacity: 1; }\n  }\n`;\n_c12 = HintContainer;\nconst CloseHintButton = styled.button`\n  position: absolute;\n  top: 5px;\n  right: 5px;\n  background: none;\n  border: none;\n  font-size: 16px;\n  cursor: pointer;\n  color: #333;\n  \n  &:hover {\n    color: #000;\n  }\n`;\n_c13 = CloseHintButton;\nconst PlayerControls = ({\n  currentPlayer,\n  canSplit\n}) => {\n  _s();\n  var _currentPlayer$id, _currentPlayer$cards;\n  const {\n    hit,\n    stand,\n    doubleDown,\n    split,\n    surrender,\n    startNewRound,\n    gameState,\n    isPlayerTurn,\n    hintsEnabled,\n    dealer,\n    currentTurn\n  } = useGame();\n  const [showHint, setShowHint] = useState(false);\n  const [hint, setHint] = useState('');\n  const [showHintButton, setShowHintButton] = useState(false);\n\n  // Timer for showing the hint button after 10 seconds of inactivity\n  useEffect(() => {\n    // Only start timer if hints are enabled and it's player's turn\n    if (!hintsEnabled || !isPlayerTurn()) {\n      setShowHintButton(false);\n      return;\n    }\n\n    // Reset hint when player or turn changes\n    setShowHint(false);\n    const timer = setTimeout(() => {\n      if (currentPlayer && isPlayerTurn()) {\n        setShowHintButton(true);\n      }\n    }, 10000); // 10 seconds\n\n    return () => clearTimeout(timer);\n  }, [currentPlayer, isPlayerTurn, hintsEnabled, currentTurn]);\n\n  // Reset hint and hint button when player makes a move\n  const handleAction = action => {\n    setShowHint(false);\n    setShowHintButton(false);\n    action();\n  };\n\n  // Handle showing hint when button is clicked\n  const handleShowHint = () => {\n    if (currentPlayer && isPlayerTurn()) {\n      let hintText = getStrategyHint(currentPlayer);\n\n      // Fallback hint if no specific strategy is found\n      if (!hintText || hintText.trim() === '') {\n        const total = currentPlayer.score || 0;\n        if (total >= 17) {\n          hintText = 'With a high total, standing is usually best.';\n        } else if (total <= 8) {\n          hintText = 'With a low total, hitting is usually best.';\n        } else {\n          hintText = `With a total of ${total}, consider the dealer's upcard.`;\n        }\n      }\n      setHint(hintText);\n      setShowHint(true);\n    }\n  };\n\n  // Convert card value to numeric value\n  const getValue = card => {\n    if (!card || !card.value) return 0;\n    if (['J', 'Q', 'K'].includes(card.value)) return 10;\n    if (card.value === 'A') return 11;\n    return parseInt(card.value, 10);\n  };\n\n  // Get dealer's upcard value (only the visible card)\n  const getDealerUpcard = () => {\n    // In blackjack, only the first card is visible to players\n    if (!dealer || !dealer.cards || dealer.cards.length === 0) return null;\n\n    // Only use the first card (the upcard)\n    const upcard = dealer.cards[0];\n    return getValue(upcard);\n  };\n\n  // Get strategy hint based on player's hand and dealer's upcard\n  const getStrategyHint = player => {\n    if (!player || !player.cards || player.cards.length === 0) return 'Wait for cards to be dealt.';\n\n    // Get dealer's upcard value\n    const dealerUpcard = getDealerUpcard();\n    if (!dealerUpcard) return 'Basic strategy: Consider your total against dealer upcard.';\n\n    // Check if player has a pair\n    const isPair = player.cards.length === 2 && getValue(player.cards[0]) === getValue(player.cards[1]);\n\n    // Check if player has a soft hand (contains an Ace counted as 11)\n    const hasSoftHand = player.cards.some(card => card.value === 'A') && player.score <= 21;\n    if (isPair) {\n      return getPairHint(getValue(player.cards[0]), dealerUpcard);\n    } else if (hasSoftHand) {\n      return getSoftTotalHint(player.score, dealerUpcard);\n    } else {\n      return getHardTotalHint(player.score, dealerUpcard);\n    }\n  };\n\n  // Get hint for pair hands\n  const getPairHint = (pairValue, dealerUpcard) => {\n    if (pairValue === 11) return 'Always split Aces.';\n    if (pairValue === 10) return 'Never split Tens. Stand with this strong hand.';\n    if (pairValue === 9) {\n      if ([2, 3, 4, 5, 6, 8, 9].includes(dealerUpcard)) return 'Split 9s against dealer.';\n      return 'Stand with 9s against dealer.';\n    }\n    if (pairValue === 8) return 'Always split 8s.';\n    if (pairValue === 7) {\n      if (dealerUpcard >= 2 && dealerUpcard <= 7) return 'Split 7s against dealer.';\n      return 'Hit with 7s against dealer.';\n    }\n    if (pairValue === 6) {\n      if (dealerUpcard >= 2 && dealerUpcard <= 6) return 'Split 6s against dealer.';\n      return 'Hit with 6s against dealer.';\n    }\n    if (pairValue === 5) {\n      if (dealerUpcard >= 2 && dealerUpcard <= 9) return 'Double with 5s against dealer.';\n      return 'Hit with 5s against dealer.';\n    }\n    if (pairValue === 4) {\n      if (dealerUpcard === 5 || dealerUpcard === 6) return 'Split 4s against dealer.';\n      return 'Hit with 4s against dealer.';\n    }\n    if (pairValue === 3 || pairValue === 2) {\n      if (dealerUpcard >= 2 && dealerUpcard <= 7) return `Split ${pairValue}s against dealer.`;\n      return `Hit with ${pairValue}s against dealer.`;\n    }\n\n    // Fallback for any other pair\n    return `With a pair of ${pairValue}s, consider hitting.`;\n  };\n\n  // Get hint for soft totals\n  const getSoftTotalHint = (total, dealerUpcard) => {\n    if (total >= 20) return 'Stand with Soft 20 or higher.';\n    if (total === 19) {\n      if (dealerUpcard === 6) return 'Double with Soft 19 against dealer.';\n      return 'Stand with Soft 19.';\n    }\n    if (total === 18) {\n      if (dealerUpcard >= 2 && dealerUpcard <= 6) return 'Double with Soft 18 against dealer.';\n      if (dealerUpcard >= 9 || dealerUpcard === 11) return 'Hit with Soft 18 against dealer.';\n      return 'Stand with Soft 18 against dealer.';\n    }\n    if (total === 17) {\n      if (dealerUpcard >= 3 && dealerUpcard <= 6) return 'Double with Soft 17 against dealer.';\n      return 'Hit with Soft 17 against dealer.';\n    }\n    if (total === 16) {\n      if (dealerUpcard >= 4 && dealerUpcard <= 6) return 'Double with Soft 16 against dealer.';\n      return 'Hit with Soft 16 against dealer.';\n    }\n    if (total === 15) {\n      if (dealerUpcard >= 4 && dealerUpcard <= 6) return 'Double with Soft 15 against dealer.';\n      return 'Hit with Soft 15 against dealer.';\n    }\n    if (total === 14) {\n      if (dealerUpcard === 5 || dealerUpcard === 6) return 'Double with Soft 14 against dealer.';\n      return 'Hit with Soft 14 against dealer.';\n    }\n    if (total === 13) {\n      if (dealerUpcard === 5 || dealerUpcard === 6) return 'Double with Soft 13 against dealer.';\n      return 'Hit with Soft 13 against dealer.';\n    }\n\n    // Fallback for any other soft total\n    return `With Soft ${total}, hit to improve your hand.`;\n  };\n\n  // Get hint for hard totals\n  const getHardTotalHint = (total, dealerUpcard) => {\n    if (total >= 17) return 'Stand with 17 or higher.';\n    if (total >= 13 && total <= 16) {\n      if (dealerUpcard >= 2 && dealerUpcard <= 6) return `Stand with ${total} against dealer.`;\n      return `Hit with ${total} against dealer.`;\n    }\n    if (total === 12) {\n      if (dealerUpcard >= 4 && dealerUpcard <= 6) return 'Stand with 12 against dealer.';\n      return 'Hit with 12 against dealer.';\n    }\n    if (total === 11) return 'Always double with 11.';\n    if (total === 10) {\n      if (dealerUpcard >= 2 && dealerUpcard <= 9) return 'Double with 10 against dealer.';\n      return 'Hit with 10 against dealer.';\n    }\n    if (total === 9) {\n      if (dealerUpcard >= 3 && dealerUpcard <= 6) return 'Double with 9 against dealer.';\n      return 'Hit with 9 against dealer.';\n    }\n    if (total <= 8) return 'Always hit with 8 or lower.';\n\n    // Fallback for any other hard total\n    return `With a hard total of ${total}, the best play is usually to hit.`;\n  };\n\n  // Check if it's the player's turn directly\n  const playerTurn = isPlayerTurn();\n\n  // Check if this is a split hand\n  const isSplitHand = currentPlayer === null || currentPlayer === void 0 ? void 0 : (_currentPlayer$id = currentPlayer.id) === null || _currentPlayer$id === void 0 ? void 0 : _currentPlayer$id.includes('-split');\n  const isFirstAction = (currentPlayer === null || currentPlayer === void 0 ? void 0 : (_currentPlayer$cards = currentPlayer.cards) === null || _currentPlayer$cards === void 0 ? void 0 : _currentPlayer$cards.length) === 2;\n  const isGameEnded = gameState === 'ended';\n\n  // Check if player can double down (only with first 2 cards)\n  const canDoubleDown = playerTurn && isFirstAction;\n\n  // Check if player can surrender (only as first action)\n  const canSurrender = playerTurn && isFirstAction;\n\n  // Can't split a split hand\n  const canSplitHand = canSplit && !isSplitHand;\n  return /*#__PURE__*/_jsxDEV(ControlsContainer, {\n    children: [showHint && hint && /*#__PURE__*/_jsxDEV(HintContainer, {\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        role: \"img\",\n        \"aria-label\": \"hint\",\n        children: \"\\uD83D\\uDCA1\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 385,\n        columnNumber: 11\n      }, this), \" \", hint, /*#__PURE__*/_jsxDEV(CloseHintButton, {\n        onClick: () => setShowHint(false),\n        children: \"\\u2716\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 386,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 384,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(ActionsGrid, {\n      children: isGameEnded ? /*#__PURE__*/_jsxDEV(NewRoundButton, {\n        onClick: startNewRound,\n        children: [/*#__PURE__*/_jsxDEV(Icon, {\n          children: \"\\uD83D\\uDD04\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 393,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(ButtonText, {\n          children: \"New Round\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 394,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 392,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(HitButton, {\n          onClick: () => handleAction(hit),\n          disabled: !playerTurn,\n          title: \"Draw another card\",\n          children: [/*#__PURE__*/_jsxDEV(Icon, {\n            children: \"\\uD83D\\uDC46\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 403,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(ButtonText, {\n            children: \"Hit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 404,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 398,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(StandButton, {\n          onClick: () => handleAction(stand),\n          disabled: !playerTurn,\n          title: \"End your turn\",\n          children: [/*#__PURE__*/_jsxDEV(Icon, {\n            children: \"\\u270B\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 412,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(ButtonText, {\n            children: \"Stand\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 413,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 407,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(DoubleButton, {\n          onClick: () => handleAction(doubleDown),\n          disabled: !playerTurn || !canDoubleDown,\n          title: \"Double your bet and receive one more card\",\n          children: [/*#__PURE__*/_jsxDEV(Icon, {\n            children: \"\\uD83D\\uDCB0\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 421,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(ButtonText, {\n            children: \"Double\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 422,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 416,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(SplitButton, {\n          onClick: () => handleAction(split),\n          disabled: !playerTurn || !canSplitHand,\n          title: \"Split your pair into two hands\",\n          children: [/*#__PURE__*/_jsxDEV(Icon, {\n            children: \"\\u2702\\uFE0F\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 430,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(ButtonText, {\n            children: \"Split\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 431,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 425,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(SurrenderButton, {\n          onClick: () => handleAction(surrender),\n          disabled: !playerTurn || !canSurrender,\n          title: \"Forfeit half your bet and end your hand\",\n          children: [/*#__PURE__*/_jsxDEV(Icon, {\n            children: \"\\uD83C\\uDFF3\\uFE0F\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 439,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(ButtonText, {\n            children: \"Surrender\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 440,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 434,\n          columnNumber: 13\n        }, this), hintsEnabled && playerTurn && showHintButton && /*#__PURE__*/_jsxDEV(ActionButton, {\n          onClick: handleShowHint,\n          style: {\n            backgroundColor: '#e2b714',\n            color: 'black'\n          },\n          title: \"Get strategy advice\",\n          children: [/*#__PURE__*/_jsxDEV(Icon, {\n            children: \"\\uD83D\\uDCA1\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 449,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(ButtonText, {\n            children: \"Show Hint\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 450,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 444,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 390,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 382,\n    columnNumber: 5\n  }, this);\n};\n_s(PlayerControls, \"yfWJE8VycllaNMcxIWrUrGl5CIU=\", false, function () {\n  return [useGame];\n});\n_c14 = PlayerControls;\nexport default PlayerControls;\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9, _c10, _c11, _c12, _c13, _c14;\n$RefreshReg$(_c, \"ControlsContainer\");\n$RefreshReg$(_c2, \"ActionsGrid\");\n$RefreshReg$(_c3, \"ActionButton\");\n$RefreshReg$(_c4, \"HitButton\");\n$RefreshReg$(_c5, \"StandButton\");\n$RefreshReg$(_c6, \"DoubleButton\");\n$RefreshReg$(_c7, \"SplitButton\");\n$RefreshReg$(_c8, \"SurrenderButton\");\n$RefreshReg$(_c9, \"NewRoundButton\");\n$RefreshReg$(_c10, \"Icon\");\n$RefreshReg$(_c11, \"ButtonText\");\n$RefreshReg$(_c12, \"HintContainer\");\n$RefreshReg$(_c13, \"CloseHintButton\");\n$RefreshReg$(_c14, \"PlayerControls\");","map":{"version":3,"names":["React","useState","useEffect","styled","useGame","jsxDEV","_jsxDEV","Fragment","_Fragment","ControlsContainer","div","_c","ActionsGrid","_c2","ActionButton","button","_c3","HitButton","_c4","StandButton","_c5","DoubleButton","_c6","SplitButton","_c7","SurrenderButton","_c8","NewRoundButton","_c9","Icon","span","_c10","ButtonText","_c11","HintContainer","_c12","CloseHintButton","_c13","PlayerControls","currentPlayer","canSplit","_s","_currentPlayer$id","_currentPlayer$cards","hit","stand","doubleDown","split","surrender","startNewRound","gameState","isPlayerTurn","hintsEnabled","dealer","currentTurn","showHint","setShowHint","hint","setHint","showHintButton","setShowHintButton","timer","setTimeout","clearTimeout","handleAction","action","handleShowHint","hintText","getStrategyHint","trim","total","score","getValue","card","value","includes","parseInt","getDealerUpcard","cards","length","upcard","player","dealerUpcard","isPair","hasSoftHand","some","getPairHint","getSoftTotalHint","getHardTotalHint","pairValue","playerTurn","isSplitHand","id","isFirstAction","isGameEnded","canDoubleDown","canSurrender","canSplitHand","children","role","fileName","_jsxFileName","lineNumber","columnNumber","onClick","disabled","title","style","backgroundColor","color","_c14","$RefreshReg$"],"sources":["C:/Users/twj23/Desktop/Developer/Games/Multiplayer Blackjack Copy/client/src/components/PlayerControls.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport styled from 'styled-components';\r\nimport { useGame } from '../contexts/GameContext';\r\n\r\nconst ControlsContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  width: 100%;\r\n  max-width: 600px;\r\n  margin: 0 auto;\r\n  padding: 1rem;\r\n  background-color: rgba(30, 30, 46, 0.8);\r\n  border-radius: 10px;\r\n  box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);\r\n`;\r\n\r\nconst ActionsGrid = styled.div`\r\n  display: grid;\r\n  grid-template-columns: repeat(3, 1fr);\r\n  gap: 10px;\r\n  width: 100%;\r\n  margin-bottom: 1rem;\r\n  \r\n  @media (max-width: 600px) {\r\n    grid-template-columns: repeat(2, 1fr);\r\n  }\r\n`;\r\n\r\nconst ActionButton = styled.button`\r\n  padding: 0.8rem 0;\r\n  border-radius: 5px;\r\n  border: none;\r\n  font-size: 1rem;\r\n  font-weight: 600;\r\n  cursor: pointer;\r\n  transition: all 0.2s;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n  \r\n  &:hover:not(:disabled) {\r\n    transform: translateY(-3px);\r\n  }\r\n  \r\n  &:disabled {\r\n    opacity: 0.5;\r\n    cursor: not-allowed;\r\n  }\r\n  \r\n  svg {\r\n    margin-bottom: 5px;\r\n    font-size: 1.2rem;\r\n  }\r\n`;\r\n\r\nconst HitButton = styled(ActionButton)`\r\n  background-color: #4caf50;\r\n  color: white;\r\n`;\r\n\r\nconst StandButton = styled(ActionButton)`\r\n  background-color: #f44336;\r\n  color: white;\r\n`;\r\n\r\nconst DoubleButton = styled(ActionButton)`\r\n  background-color: #2196f3;\r\n  color: white;\r\n`;\r\n\r\nconst SplitButton = styled(ActionButton)`\r\n  background-color: #ff9800;\r\n  color: white;\r\n`;\r\n\r\nconst SurrenderButton = styled(ActionButton)`\r\n  background-color: #9e9e9e;\r\n  color: white;\r\n`;\r\n\r\nconst NewRoundButton = styled(ActionButton)`\r\n  background-color: #9c27b0;\r\n  color: white;\r\n  grid-column: span 2;\r\n`;\r\n\r\nconst Icon = styled.span`\r\n  font-size: 1.5rem;\r\n  margin-bottom: 5px;\r\n`;\r\n\r\nconst ButtonText = styled.span`\r\n  font-size: 0.9rem;\r\n`;\r\n\r\nconst HintContainer = styled.div`\r\n  background-color: rgba(226, 183, 20, 0.9);\r\n  color: #000;\r\n  padding: 15px;\r\n  border-radius: 5px;\r\n  margin-bottom: 15px;\r\n  font-weight: 600;\r\n  text-align: center;\r\n  animation: fadeIn 0.5s ease-in;\r\n  position: relative;\r\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);\r\n  max-width: 90%;\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  \r\n  @keyframes fadeIn {\r\n    from { opacity: 0; }\r\n    to { opacity: 1; }\r\n  }\r\n`;\r\n\r\nconst CloseHintButton = styled.button`\r\n  position: absolute;\r\n  top: 5px;\r\n  right: 5px;\r\n  background: none;\r\n  border: none;\r\n  font-size: 16px;\r\n  cursor: pointer;\r\n  color: #333;\r\n  \r\n  &:hover {\r\n    color: #000;\r\n  }\r\n`;\r\n\r\nconst PlayerControls = ({ currentPlayer, canSplit }) => {\r\n  const { \r\n    hit, \r\n    stand, \r\n    doubleDown, \r\n    split, \r\n    surrender, \r\n    startNewRound, \r\n    gameState, \r\n    isPlayerTurn,\r\n    hintsEnabled,\r\n    dealer,\r\n    currentTurn\r\n  } = useGame();\r\n  \r\n  const [showHint, setShowHint] = useState(false);\r\n  const [hint, setHint] = useState('');\r\n  const [showHintButton, setShowHintButton] = useState(false);\r\n  \r\n  // Timer for showing the hint button after 10 seconds of inactivity\r\n  useEffect(() => {\r\n    // Only start timer if hints are enabled and it's player's turn\r\n    if (!hintsEnabled || !isPlayerTurn()) {\r\n      setShowHintButton(false);\r\n      return;\r\n    }\r\n    \r\n    // Reset hint when player or turn changes\r\n    setShowHint(false);\r\n    \r\n    const timer = setTimeout(() => {\r\n      if (currentPlayer && isPlayerTurn()) {\r\n        setShowHintButton(true);\r\n      }\r\n    }, 10000); // 10 seconds\r\n    \r\n    return () => clearTimeout(timer);\r\n  }, [currentPlayer, isPlayerTurn, hintsEnabled, currentTurn]);\r\n  \r\n  // Reset hint and hint button when player makes a move\r\n  const handleAction = (action) => {\r\n    setShowHint(false);\r\n    setShowHintButton(false);\r\n    action();\r\n  };\r\n  \r\n  // Handle showing hint when button is clicked\r\n  const handleShowHint = () => {\r\n    if (currentPlayer && isPlayerTurn()) {\r\n      let hintText = getStrategyHint(currentPlayer);\r\n      \r\n      // Fallback hint if no specific strategy is found\r\n      if (!hintText || hintText.trim() === '') {\r\n        const total = currentPlayer.score || 0;\r\n        if (total >= 17) {\r\n          hintText = 'With a high total, standing is usually best.';\r\n        } else if (total <= 8) {\r\n          hintText = 'With a low total, hitting is usually best.';\r\n        } else {\r\n          hintText = `With a total of ${total}, consider the dealer's upcard.`;\r\n        }\r\n      }\r\n      \r\n      setHint(hintText);\r\n      setShowHint(true);\r\n    }\r\n  };\r\n  \r\n  // Convert card value to numeric value\r\n  const getValue = (card) => {\r\n    if (!card || !card.value) return 0;\r\n    \r\n    if (['J', 'Q', 'K'].includes(card.value)) return 10;\r\n    if (card.value === 'A') return 11;\r\n    return parseInt(card.value, 10);\r\n  };\r\n  \r\n  // Get dealer's upcard value (only the visible card)\r\n  const getDealerUpcard = () => {\r\n    // In blackjack, only the first card is visible to players\r\n    if (!dealer || !dealer.cards || dealer.cards.length === 0) return null;\r\n    \r\n    // Only use the first card (the upcard)\r\n    const upcard = dealer.cards[0];\r\n    return getValue(upcard);\r\n  };\r\n  \r\n  // Get strategy hint based on player's hand and dealer's upcard\r\n  const getStrategyHint = (player) => {\r\n    if (!player || !player.cards || player.cards.length === 0) return 'Wait for cards to be dealt.';\r\n    \r\n    // Get dealer's upcard value\r\n    const dealerUpcard = getDealerUpcard();\r\n    if (!dealerUpcard) return 'Basic strategy: Consider your total against dealer upcard.';\r\n    \r\n    // Check if player has a pair\r\n    const isPair = player.cards.length === 2 && \r\n                  getValue(player.cards[0]) === getValue(player.cards[1]);\r\n    \r\n    // Check if player has a soft hand (contains an Ace counted as 11)\r\n    const hasSoftHand = player.cards.some(card => card.value === 'A') && \r\n                        player.score <= 21;\r\n    \r\n    if (isPair) {\r\n      return getPairHint(getValue(player.cards[0]), dealerUpcard);\r\n    } else if (hasSoftHand) {\r\n      return getSoftTotalHint(player.score, dealerUpcard);\r\n    } else {\r\n      return getHardTotalHint(player.score, dealerUpcard);\r\n    }\r\n  };\r\n  \r\n  // Get hint for pair hands\r\n  const getPairHint = (pairValue, dealerUpcard) => {\r\n    if (pairValue === 11) return 'Always split Aces.';\r\n    if (pairValue === 10) return 'Never split Tens. Stand with this strong hand.';\r\n    \r\n    if (pairValue === 9) {\r\n      if ([2, 3, 4, 5, 6, 8, 9].includes(dealerUpcard)) return 'Split 9s against dealer.';\r\n      return 'Stand with 9s against dealer.';\r\n    }\r\n    \r\n    if (pairValue === 8) return 'Always split 8s.';\r\n    \r\n    if (pairValue === 7) {\r\n      if (dealerUpcard >= 2 && dealerUpcard <= 7) return 'Split 7s against dealer.';\r\n      return 'Hit with 7s against dealer.';\r\n    }\r\n    \r\n    if (pairValue === 6) {\r\n      if (dealerUpcard >= 2 && dealerUpcard <= 6) return 'Split 6s against dealer.';\r\n      return 'Hit with 6s against dealer.';\r\n    }\r\n    \r\n    if (pairValue === 5) {\r\n      if (dealerUpcard >= 2 && dealerUpcard <= 9) return 'Double with 5s against dealer.';\r\n      return 'Hit with 5s against dealer.';\r\n    }\r\n    \r\n    if (pairValue === 4) {\r\n      if (dealerUpcard === 5 || dealerUpcard === 6) return 'Split 4s against dealer.';\r\n      return 'Hit with 4s against dealer.';\r\n    }\r\n    \r\n    if (pairValue === 3 || pairValue === 2) {\r\n      if (dealerUpcard >= 2 && dealerUpcard <= 7) return `Split ${pairValue}s against dealer.`;\r\n      return `Hit with ${pairValue}s against dealer.`;\r\n    }\r\n    \r\n    // Fallback for any other pair\r\n    return `With a pair of ${pairValue}s, consider hitting.`;\r\n  };\r\n  \r\n  // Get hint for soft totals\r\n  const getSoftTotalHint = (total, dealerUpcard) => {\r\n    if (total >= 20) return 'Stand with Soft 20 or higher.';\r\n    \r\n    if (total === 19) {\r\n      if (dealerUpcard === 6) return 'Double with Soft 19 against dealer.';\r\n      return 'Stand with Soft 19.';\r\n    }\r\n    \r\n    if (total === 18) {\r\n      if (dealerUpcard >= 2 && dealerUpcard <= 6) return 'Double with Soft 18 against dealer.';\r\n      if (dealerUpcard >= 9 || dealerUpcard === 11) return 'Hit with Soft 18 against dealer.';\r\n      return 'Stand with Soft 18 against dealer.';\r\n    }\r\n    \r\n    if (total === 17) {\r\n      if (dealerUpcard >= 3 && dealerUpcard <= 6) return 'Double with Soft 17 against dealer.';\r\n      return 'Hit with Soft 17 against dealer.';\r\n    }\r\n    \r\n    if (total === 16) {\r\n      if (dealerUpcard >= 4 && dealerUpcard <= 6) return 'Double with Soft 16 against dealer.';\r\n      return 'Hit with Soft 16 against dealer.';\r\n    }\r\n    \r\n    if (total === 15) {\r\n      if (dealerUpcard >= 4 && dealerUpcard <= 6) return 'Double with Soft 15 against dealer.';\r\n      return 'Hit with Soft 15 against dealer.';\r\n    }\r\n    \r\n    if (total === 14) {\r\n      if (dealerUpcard === 5 || dealerUpcard === 6) return 'Double with Soft 14 against dealer.';\r\n      return 'Hit with Soft 14 against dealer.';\r\n    }\r\n    \r\n    if (total === 13) {\r\n      if (dealerUpcard === 5 || dealerUpcard === 6) return 'Double with Soft 13 against dealer.';\r\n      return 'Hit with Soft 13 against dealer.';\r\n    }\r\n    \r\n    // Fallback for any other soft total\r\n    return `With Soft ${total}, hit to improve your hand.`;\r\n  };\r\n  \r\n  // Get hint for hard totals\r\n  const getHardTotalHint = (total, dealerUpcard) => {\r\n    if (total >= 17) return 'Stand with 17 or higher.';\r\n    \r\n    if (total >= 13 && total <= 16) {\r\n      if (dealerUpcard >= 2 && dealerUpcard <= 6) return `Stand with ${total} against dealer.`;\r\n      return `Hit with ${total} against dealer.`;\r\n    }\r\n    \r\n    if (total === 12) {\r\n      if (dealerUpcard >= 4 && dealerUpcard <= 6) return 'Stand with 12 against dealer.';\r\n      return 'Hit with 12 against dealer.';\r\n    }\r\n    \r\n    if (total === 11) return 'Always double with 11.';\r\n    \r\n    if (total === 10) {\r\n      if (dealerUpcard >= 2 && dealerUpcard <= 9) return 'Double with 10 against dealer.';\r\n      return 'Hit with 10 against dealer.';\r\n    }\r\n    \r\n    if (total === 9) {\r\n      if (dealerUpcard >= 3 && dealerUpcard <= 6) return 'Double with 9 against dealer.';\r\n      return 'Hit with 9 against dealer.';\r\n    }\r\n    \r\n    if (total <= 8) return 'Always hit with 8 or lower.';\r\n    \r\n    // Fallback for any other hard total\r\n    return `With a hard total of ${total}, the best play is usually to hit.`;\r\n  };\r\n  \r\n  // Check if it's the player's turn directly\r\n  const playerTurn = isPlayerTurn();\r\n  \r\n  // Check if this is a split hand\r\n  const isSplitHand = currentPlayer?.id?.includes('-split');\r\n  \r\n  const isFirstAction = currentPlayer?.cards?.length === 2;\r\n  const isGameEnded = gameState === 'ended';\r\n  \r\n  // Check if player can double down (only with first 2 cards)\r\n  const canDoubleDown = playerTurn && isFirstAction;\r\n  \r\n  // Check if player can surrender (only as first action)\r\n  const canSurrender = playerTurn && isFirstAction;\r\n  \r\n  // Can't split a split hand\r\n  const canSplitHand = canSplit && !isSplitHand;\r\n  \r\n  return (\r\n    <ControlsContainer>\r\n      {showHint && hint && (\r\n        <HintContainer>\r\n          <span role=\"img\" aria-label=\"hint\">💡</span> {hint}\r\n          <CloseHintButton onClick={() => setShowHint(false)}>✖</CloseHintButton>\r\n        </HintContainer>\r\n      )}\r\n      \r\n      <ActionsGrid>\r\n        {isGameEnded ? (\r\n          <NewRoundButton onClick={startNewRound}>\r\n            <Icon>🔄</Icon>\r\n            <ButtonText>New Round</ButtonText>\r\n          </NewRoundButton>\r\n        ) : (\r\n          <>\r\n            <HitButton \r\n              onClick={() => handleAction(hit)} \r\n              disabled={!playerTurn}\r\n              title=\"Draw another card\"\r\n            >\r\n              <Icon>👆</Icon>\r\n              <ButtonText>Hit</ButtonText>\r\n            </HitButton>\r\n            \r\n            <StandButton \r\n              onClick={() => handleAction(stand)} \r\n              disabled={!playerTurn}\r\n              title=\"End your turn\"\r\n            >\r\n              <Icon>✋</Icon>\r\n              <ButtonText>Stand</ButtonText>\r\n            </StandButton>\r\n            \r\n            <DoubleButton \r\n              onClick={() => handleAction(doubleDown)} \r\n              disabled={!playerTurn || !canDoubleDown}\r\n              title=\"Double your bet and receive one more card\"\r\n            >\r\n              <Icon>💰</Icon>\r\n              <ButtonText>Double</ButtonText>\r\n            </DoubleButton>\r\n            \r\n            <SplitButton \r\n              onClick={() => handleAction(split)} \r\n              disabled={!playerTurn || !canSplitHand}\r\n              title=\"Split your pair into two hands\"\r\n            >\r\n              <Icon>✂️</Icon>\r\n              <ButtonText>Split</ButtonText>\r\n            </SplitButton>\r\n            \r\n            <SurrenderButton \r\n              onClick={() => handleAction(surrender)} \r\n              disabled={!playerTurn || !canSurrender}\r\n              title=\"Forfeit half your bet and end your hand\"\r\n            >\r\n              <Icon>🏳️</Icon>\r\n              <ButtonText>Surrender</ButtonText>\r\n            </SurrenderButton>\r\n            \r\n            {hintsEnabled && playerTurn && showHintButton && (\r\n              <ActionButton \r\n                onClick={handleShowHint}\r\n                style={{ backgroundColor: '#e2b714', color: 'black' }}\r\n                title=\"Get strategy advice\"\r\n              >\r\n                <Icon>💡</Icon>\r\n                <ButtonText>Show Hint</ButtonText>\r\n              </ActionButton>\r\n            )}\r\n          </>\r\n        )}\r\n      </ActionsGrid>\r\n    </ControlsContainer>\r\n  );\r\n};\r\n\r\nexport default PlayerControls; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}