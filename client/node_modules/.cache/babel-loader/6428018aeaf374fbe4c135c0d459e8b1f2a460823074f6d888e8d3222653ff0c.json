{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\twj23\\\\Desktop\\\\Developer\\\\Games\\\\Multiplayer Blackjack Copy\\\\client\\\\src\\\\contexts\\\\GameContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { io } from 'socket.io-client';\nimport { useNavigate } from 'react-router-dom';\nimport { SOCKET_SERVER } from '../config';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const GameContext = /*#__PURE__*/createContext();\nexport const useGame = () => {\n  _s();\n  return useContext(GameContext);\n};\n_s(useGame, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const GameProvider = ({\n  children\n}) => {\n  _s2();\n  const [socket, setSocket] = useState(null);\n  const [connected, setConnected] = useState(false);\n  const [username, setUsername] = useState('');\n  const [balance, setBalance] = useState(1000);\n  const [roomId, setRoomId] = useState(null);\n  const [players, setPlayers] = useState([]);\n  const [dealer, setDealer] = useState({\n    cards: [],\n    score: 0\n  });\n  const [gameState, setGameState] = useState('waiting');\n  const [currentTurn, setCurrentTurn] = useState(null);\n  const [messages, setMessages] = useState([]);\n  const [error, setError] = useState(null);\n  const [gameHistory, setGameHistory] = useState([]);\n  const [leaderboard, setLeaderboard] = useState([]);\n  const [lastBet, setLastBet] = useState(0);\n  // Money request states\n  const [pendingMoneyRequests, setPendingMoneyRequests] = useState([]);\n  const [sentMoneyRequests, setSentMoneyRequests] = useState([]);\n  const [activeLoans, setActiveLoans] = useState([]);\n  const navigate = useNavigate();\n\n  // Helper function to add messages to the chat\n  const addMessage = message => {\n    setMessages(prevMessages => [...prevMessages, message]);\n  };\n\n  // Connect to socket server\n  useEffect(() => {\n    const newSocket = io(SOCKET_SERVER);\n    newSocket.on('connect', () => {\n      setSocket(newSocket);\n      setConnected(true);\n      console.log('Connected to server');\n    });\n    newSocket.on('disconnect', () => {\n      setConnected(false);\n      console.log('Disconnected from server');\n    });\n    newSocket.on('error', data => {\n      setError(data.message);\n      setTimeout(() => setError(null), 5000);\n    });\n    return () => {\n      newSocket.disconnect();\n    };\n  }, []);\n\n  // Handle room events\n  useEffect(() => {\n    if (!socket) return;\n    socket.on('room_joined', data => {\n      if (!data) return;\n      setRoomId(data.roomId);\n      setPlayers(data.players || []);\n      setGameState(data.gameState || 'waiting');\n      setError(null);\n\n      // Add system message\n      const playerNames = data.players ? data.players.map(p => p.username).join(', ') : '';\n      addMessage({\n        content: `Room joined. Current players: ${playerNames}`,\n        type: 'system',\n        timestamp: Date.now()\n      });\n\n      // Navigate to game room after successful join\n      navigate('/game-room');\n    });\n    socket.on('player_joined', data => {\n      if (!data || !data.players) return;\n      setPlayers(data.players);\n\n      // Add system message about new player\n      const newPlayer = data.players[data.players.length - 1];\n      if (newPlayer) {\n        addMessage({\n          content: `${newPlayer.username} joined the room`,\n          type: 'system',\n          timestamp: Date.now()\n        });\n      }\n    });\n    socket.on('player_left', data => {\n      if (!data) return;\n      setPlayers(data.players || []);\n\n      // Add system message about player leaving\n      if (data.leftPlayer) {\n        addMessage({\n          content: `${data.leftPlayer} left the room`,\n          type: 'system',\n          timestamp: Date.now()\n        });\n      }\n    });\n\n    // Money request events\n    socket.on('money_request', data => {\n      console.log('Received money request:', data);\n      setPendingMoneyRequests(prev => [...prev, data]);\n\n      // Add system message\n      addMessage({\n        content: `${data.requester.username} requested $${data.amount} from you. If accepted, they will return $${data.returnAmount}.`,\n        type: 'system',\n        timestamp: Date.now()\n      });\n    });\n    socket.on('request_sent', data => {\n      console.log('Request sent confirmation:', data);\n      setSentMoneyRequests(prev => [...prev, data]);\n\n      // Add system message\n      addMessage({\n        content: `You requested $${data.amount} from ${data.targetPlayer.username}.`,\n        type: 'system',\n        timestamp: Date.now()\n      });\n    });\n    socket.on('money_request_accepted', data => {\n      console.log('Money request accepted:', data);\n      // Remove from sent requests\n      setSentMoneyRequests(prev => prev.filter(req => req.requestId !== data.requestId));\n\n      // Add to active loans\n      setActiveLoans(prev => [...prev, {\n        ...data,\n        status: 'active'\n      }]);\n\n      // Add system message\n      addMessage({\n        content: `${data.lender.username} accepted your money request for $${data.amount}. You will need to repay $${data.returnAmount}.`,\n        type: 'system',\n        timestamp: Date.now()\n      });\n    });\n    socket.on('money_sent', data => {\n      console.log('Money sent:', data);\n      // Remove from pending requests\n      setPendingMoneyRequests(prev => prev.filter(req => req.requestId !== data.requestId));\n\n      // Add system message\n      addMessage({\n        content: `You sent $${data.amount} to ${data.borrower.username}. They will repay $${data.returnAmount}.`,\n        type: 'system',\n        timestamp: Date.now()\n      });\n    });\n    socket.on('money_request_rejected', data => {\n      // Remove from sent requests\n      setSentMoneyRequests(prev => prev.filter(req => req.requestId !== data.requestId));\n\n      // Add system message\n      addMessage({\n        content: `${data.lender.username} rejected your money request.`,\n        type: 'system',\n        timestamp: Date.now()\n      });\n    });\n    socket.on('request_rejected', data => {\n      // Remove from pending requests\n      setPendingMoneyRequests(prev => prev.filter(req => req.requestId !== data.requestId));\n\n      // Add system message\n      addMessage({\n        content: `You rejected the money request from ${data.borrower.username}.`,\n        type: 'system',\n        timestamp: Date.now()\n      });\n    });\n    socket.on('loan_repaid', data => {\n      // Remove from active loans\n      setActiveLoans(prev => prev.filter(loan => loan.requestId !== data.requestId));\n\n      // Add system message\n      addMessage({\n        content: `${data.borrower.username} repaid their loan of $${data.amount} with interest (total: $${data.returnAmount}).`,\n        type: 'system',\n        timestamp: Date.now()\n      });\n    });\n    socket.on('repayment_sent', data => {\n      // Remove from active loans\n      setActiveLoans(prev => prev.filter(loan => loan.requestId !== data.requestId));\n\n      // Add system message\n      addMessage({\n        content: `You repaid your loan of $${data.amount} to ${data.lender.username} with interest (total: $${data.returnAmount}).`,\n        type: 'system',\n        timestamp: Date.now()\n      });\n    });\n    return () => {\n      socket.off('room_joined');\n      socket.off('player_joined');\n      socket.off('player_left');\n      socket.off('money_request');\n      socket.off('request_sent');\n      socket.off('money_request_accepted');\n      socket.off('money_sent');\n      socket.off('money_request_rejected');\n      socket.off('request_rejected');\n      socket.off('loan_repaid');\n      socket.off('repayment_sent');\n    };\n  }, [socket, navigate]);\n\n  // Handle game events\n  useEffect(() => {\n    if (!socket) return;\n    socket.on('game_started', data => {\n      if (!data) return;\n      setGameState('betting');\n      setDealer(data.dealer || {\n        cards: [],\n        score: 0\n      });\n      setPlayers(data.players || []);\n      addMessage({\n        content: 'Game started! Place your bets.',\n        type: 'system',\n        timestamp: Date.now()\n      });\n    });\n    socket.on('betting_ended', data => {\n      if (!data) return;\n      setPlayers(data.players || []);\n      setGameState('playing');\n      addMessage({\n        content: 'All bets placed. Game is starting...',\n        type: 'system',\n        timestamp: Date.now()\n      });\n    });\n    socket.on('player_turn', data => {\n      setCurrentTurn(data.playerId);\n      const player = data.players && data.players.find(p => p.id === data.playerId);\n      addMessage({\n        content: `It's ${player ? player.username : 'unknown player'}'s turn`,\n        type: 'system',\n        timestamp: Date.now()\n      });\n    });\n    socket.on('card_dealt', data => {\n      if (!data) return;\n      if (data.to === 'dealer') {\n        setDealer(data.dealer || {\n          cards: [],\n          score: 0\n        });\n      } else if (data.to && data.cards) {\n        setPlayers(prev => prev.map(player => player.id === data.to ? {\n          ...player,\n          cards: data.cards,\n          score: data.score || 0\n        } : player));\n      }\n    });\n    socket.on('turn_ended', data => {\n      if (!data) return;\n      setCurrentTurn(data.nextTurn);\n      setPlayers(data.players || []);\n    });\n    socket.on('dealer_turn', () => {\n      setCurrentTurn('dealer');\n      addMessage({\n        content: `Dealer's turn`,\n        type: 'system',\n        timestamp: Date.now()\n      });\n    });\n    socket.on('game_ended', data => {\n      setGameState('ended');\n      setDealer(data.dealer);\n      setPlayers(data.players || []);\n      setCurrentTurn(null);\n\n      // Update the player's balance\n      const currentPlayer = data.players && data.players.find(p => p.id === socket.id);\n      if (currentPlayer) {\n        setBalance(currentPlayer.balance);\n      }\n\n      // Update game history\n      if (data.result) {\n        setGameHistory(prev => [{\n          ...data.result,\n          timestamp: Date.now(),\n          roundNumber: prev.length + 1\n        }, ...prev].slice(0, 10)); // Keep only the last 10 rounds\n      }\n\n      // Add system message\n      addMessage({\n        content: `Game ended. Results: ${data.result && data.result.results ? data.result.results.map(r => `${r.username}: ${r.outcome} (${r.amountChange >= 0 ? '+' : ''}${r.amountChange})`).join(', ') : 'No results available'}`,\n        type: 'system',\n        timestamp: Date.now()\n      });\n    });\n    socket.on('new_round', data => {\n      if (!data) return;\n      setGameState('betting');\n      setPlayers(data.players || []);\n      setDealer({\n        cards: [],\n        score: 0\n      });\n      addMessage({\n        content: 'New round started. Place your bets!',\n        type: 'system',\n        timestamp: Date.now()\n      });\n    });\n    socket.on('message', data => {\n      addMessage(data);\n    });\n    socket.on('leaderboard_updated', data => {\n      setLeaderboard(data.leaderboard);\n    });\n    socket.on('player_split', data => {\n      var _data$players$find;\n      if (!data) return;\n      setPlayers(data.players || []);\n      addMessage({\n        content: `${((_data$players$find = data.players.find(p => p.id === data.playerId)) === null || _data$players$find === void 0 ? void 0 : _data$players$find.username) || 'Player'} split their hand`,\n        type: 'system',\n        timestamp: Date.now()\n      });\n    });\n    return () => {\n      socket.off('game_started');\n      socket.off('betting_ended');\n      socket.off('card_dealt');\n      socket.off('player_turn');\n      socket.off('turn_ended');\n      socket.off('dealer_turn');\n      socket.off('game_ended');\n      socket.off('new_round');\n      socket.off('message');\n      socket.off('leaderboard_updated');\n      socket.off('player_split');\n    };\n  }, [socket]);\n\n  // Game actions\n  const createRoom = (username, initialBalance = 1000) => {\n    if (!connected) return;\n    setUsername(username);\n    setBalance(initialBalance);\n    socket.emit('create_room', {\n      username,\n      balance: initialBalance\n    });\n  };\n  const joinRoom = (roomId, username, initialBalance = 1000) => {\n    if (!connected) return;\n    setUsername(username);\n    setBalance(initialBalance);\n    socket.emit('join_room', {\n      roomId,\n      username,\n      balance: initialBalance\n    });\n  };\n  const startGame = () => {\n    if (!connected || !roomId) return;\n    socket.emit('start_game', {\n      roomId\n    });\n  };\n  const placeBet = amount => {\n    if (!connected || !roomId) return;\n    socket.emit('place_bet', {\n      roomId,\n      amount\n    });\n    setLastBet(amount);\n  };\n  const hit = () => {\n    if (!connected || !roomId) return;\n\n    // For split hands, we need to use the original player's socket ID\n    if (currentTurn && currentTurn.includes('-split')) {\n      const originalPlayerId = currentTurn.split('-')[0];\n      if (originalPlayerId === socket.id) {\n        socket.emit('hit', {\n          roomId,\n          handId: currentTurn\n        });\n      }\n    } else if (currentTurn === socket.id) {\n      socket.emit('hit', {\n        roomId\n      });\n    }\n  };\n  const stand = () => {\n    if (!connected || !roomId) return;\n\n    // For split hands, we need to use the original player's socket ID\n    if (currentTurn && currentTurn.includes('-split')) {\n      const originalPlayerId = currentTurn.split('-')[0];\n      if (originalPlayerId === socket.id) {\n        socket.emit('stand', {\n          roomId,\n          handId: currentTurn\n        });\n      }\n    } else if (currentTurn === socket.id) {\n      socket.emit('stand', {\n        roomId\n      });\n    }\n  };\n  const doubleDown = () => {\n    if (!connected || !roomId) return;\n\n    // For split hands, we need to use the original player's socket ID\n    if (currentTurn && currentTurn.includes('-split')) {\n      const originalPlayerId = currentTurn.split('-')[0];\n      if (originalPlayerId === socket.id) {\n        socket.emit('double_down', {\n          roomId,\n          handId: currentTurn\n        });\n      }\n    } else if (currentTurn === socket.id) {\n      socket.emit('double_down', {\n        roomId\n      });\n    }\n  };\n  const split = () => {\n    if (!connected || !roomId || currentTurn !== socket.id) return;\n\n    // Can't split a split hand\n    if (currentTurn.includes('-split')) return;\n    socket.emit('split', {\n      roomId\n    });\n  };\n  const surrender = () => {\n    if (!connected || !roomId) return;\n\n    // For split hands, we need to use the original player's socket ID\n    if (currentTurn && currentTurn.includes('-split')) {\n      const originalPlayerId = currentTurn.split('-')[0];\n      if (originalPlayerId === socket.id) {\n        socket.emit('surrender', {\n          roomId,\n          handId: currentTurn\n        });\n      }\n    } else if (currentTurn === socket.id) {\n      socket.emit('surrender', {\n        roomId\n      });\n    }\n  };\n  const startNewRound = () => {\n    if (!connected || !roomId) return;\n    socket.emit('new_round', {\n      roomId\n    });\n  };\n  const sendMessage = message => {\n    if (!connected || !roomId) return;\n    socket.emit('send_message', {\n      roomId,\n      message,\n      sender: username\n    });\n  };\n  const leaveRoom = () => {\n    if (!connected || !roomId) return;\n    socket.emit('leave_room', {\n      roomId\n    });\n    setRoomId(null);\n    setPlayers([]);\n    setDealer({\n      cards: [],\n      score: 0\n    });\n    setGameState('waiting');\n    setCurrentTurn(null);\n    setMessages([]);\n  };\n\n  // Check if it's current player's turn\n  const isPlayerTurn = () => {\n    if (!socket || !currentTurn) return false;\n\n    // Direct match with player's socket ID\n    if (currentTurn === socket.id) return true;\n\n    // Check if it's the player's split hand turn\n    // Split hands have IDs in the format: originalPlayerId-split\n    if (currentTurn.includes('-split')) {\n      const originalPlayerId = currentTurn.split('-')[0];\n      return originalPlayerId === socket.id;\n    }\n    return false;\n  };\n\n  // Find the current player\n  const getCurrentPlayer = () => {\n    if (!socket || !players) return null;\n\n    // First check for the player's main hand\n    const player = players.find(p => p.id === socket.id);\n\n    // If it's the player's split hand turn, return that hand instead\n    if (currentTurn && currentTurn.includes('-split')) {\n      const splitHand = players.find(p => p.id === currentTurn);\n      if (splitHand && splitHand.originalPlayer === socket.id) {\n        return splitHand;\n      }\n    }\n    return player;\n  };\n\n  // Money request functions\n  const requestMoney = (targetPlayerId, amount) => {\n    if (!socket || !roomId) return;\n    socket.emit('request_money', {\n      roomId,\n      targetPlayerId,\n      amount: parseInt(amount, 10)\n    });\n  };\n  const acceptMoneyRequest = requestId => {\n    if (!socket || !roomId) return;\n    socket.emit('accept_money_request', {\n      roomId,\n      requestId\n    });\n  };\n  const rejectMoneyRequest = requestId => {\n    if (!socket || !roomId) return;\n    socket.emit('reject_money_request', {\n      roomId,\n      requestId\n    });\n  };\n  const repayLoan = requestId => {\n    if (!socket || !roomId) return;\n    socket.emit('repay_loan', {\n      roomId,\n      requestId\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(GameContext.Provider, {\n    value: {\n      connected,\n      username,\n      balance,\n      roomId,\n      players,\n      dealer,\n      gameState,\n      currentTurn,\n      messages,\n      error,\n      gameHistory,\n      leaderboard,\n      lastBet,\n      // Money request states and functions\n      pendingMoneyRequests,\n      sentMoneyRequests,\n      activeLoans,\n      requestMoney,\n      acceptMoneyRequest,\n      rejectMoneyRequest,\n      repayLoan,\n      createRoom,\n      joinRoom,\n      startGame,\n      placeBet,\n      hit,\n      stand,\n      doubleDown,\n      split,\n      surrender,\n      startNewRound,\n      sendMessage,\n      leaveRoom,\n      isPlayerTurn,\n      getCurrentPlayer\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 579,\n    columnNumber: 5\n  }, this);\n};\n_s2(GameProvider, \"ONF8T10mhhKuOxzSzDLRlIb1MWU=\", false, function () {\n  return [useNavigate];\n});\n_c = GameProvider;\nvar _c;\n$RefreshReg$(_c, \"GameProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","io","useNavigate","SOCKET_SERVER","jsxDEV","_jsxDEV","GameContext","useGame","_s","GameProvider","children","_s2","socket","setSocket","connected","setConnected","username","setUsername","balance","setBalance","roomId","setRoomId","players","setPlayers","dealer","setDealer","cards","score","gameState","setGameState","currentTurn","setCurrentTurn","messages","setMessages","error","setError","gameHistory","setGameHistory","leaderboard","setLeaderboard","lastBet","setLastBet","pendingMoneyRequests","setPendingMoneyRequests","sentMoneyRequests","setSentMoneyRequests","activeLoans","setActiveLoans","navigate","addMessage","message","prevMessages","newSocket","on","console","log","data","setTimeout","disconnect","playerNames","map","p","join","content","type","timestamp","Date","now","newPlayer","length","leftPlayer","prev","requester","amount","returnAmount","targetPlayer","filter","req","requestId","status","lender","borrower","loan","off","playerId","player","find","id","to","nextTurn","currentPlayer","result","roundNumber","slice","results","r","outcome","amountChange","_data$players$find","createRoom","initialBalance","emit","joinRoom","startGame","placeBet","hit","includes","originalPlayerId","split","handId","stand","doubleDown","surrender","startNewRound","sendMessage","sender","leaveRoom","isPlayerTurn","getCurrentPlayer","splitHand","originalPlayer","requestMoney","targetPlayerId","parseInt","acceptMoneyRequest","rejectMoneyRequest","repayLoan","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/twj23/Desktop/Developer/Games/Multiplayer Blackjack Copy/client/src/contexts/GameContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\r\nimport { io } from 'socket.io-client';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { SOCKET_SERVER } from '../config';\r\n\r\nexport const GameContext = createContext();\r\n\r\nexport const useGame = () => useContext(GameContext);\r\n\r\nexport const GameProvider = ({ children }) => {\r\n  const [socket, setSocket] = useState(null);\r\n  const [connected, setConnected] = useState(false);\r\n  const [username, setUsername] = useState('');\r\n  const [balance, setBalance] = useState(1000);\r\n  const [roomId, setRoomId] = useState(null);\r\n  const [players, setPlayers] = useState([]);\r\n  const [dealer, setDealer] = useState({ cards: [], score: 0 });\r\n  const [gameState, setGameState] = useState('waiting');\r\n  const [currentTurn, setCurrentTurn] = useState(null);\r\n  const [messages, setMessages] = useState([]);\r\n  const [error, setError] = useState(null);\r\n  const [gameHistory, setGameHistory] = useState([]);\r\n  const [leaderboard, setLeaderboard] = useState([]);\r\n  const [lastBet, setLastBet] = useState(0);\r\n  // Money request states\r\n  const [pendingMoneyRequests, setPendingMoneyRequests] = useState([]);\r\n  const [sentMoneyRequests, setSentMoneyRequests] = useState([]);\r\n  const [activeLoans, setActiveLoans] = useState([]);\r\n  const navigate = useNavigate();\r\n\r\n  // Helper function to add messages to the chat\r\n  const addMessage = (message) => {\r\n    setMessages(prevMessages => [...prevMessages, message]);\r\n  };\r\n\r\n  // Connect to socket server\r\n  useEffect(() => {\r\n    const newSocket = io(SOCKET_SERVER);\r\n    \r\n    newSocket.on('connect', () => {\r\n      setSocket(newSocket);\r\n      setConnected(true);\r\n      console.log('Connected to server');\r\n    });\r\n    \r\n    newSocket.on('disconnect', () => {\r\n      setConnected(false);\r\n      console.log('Disconnected from server');\r\n    });\r\n    \r\n    newSocket.on('error', (data) => {\r\n      setError(data.message);\r\n      setTimeout(() => setError(null), 5000);\r\n    });\r\n    \r\n    return () => {\r\n      newSocket.disconnect();\r\n    };\r\n  }, []);\r\n  \r\n  // Handle room events\r\n  useEffect(() => {\r\n    if (!socket) return;\r\n    \r\n    socket.on('room_joined', (data) => {\r\n      if (!data) return;\r\n      setRoomId(data.roomId);\r\n      setPlayers(data.players || []);\r\n      setGameState(data.gameState || 'waiting');\r\n      setError(null);\r\n      \r\n      // Add system message\r\n      const playerNames = data.players ? data.players.map(p => p.username).join(', ') : '';\r\n      addMessage({\r\n        content: `Room joined. Current players: ${playerNames}`,\r\n        type: 'system',\r\n        timestamp: Date.now()\r\n      });\r\n\r\n      // Navigate to game room after successful join\r\n      navigate('/game-room');\r\n    });\r\n    \r\n    socket.on('player_joined', (data) => {\r\n      if (!data || !data.players) return;\r\n      setPlayers(data.players);\r\n      \r\n      // Add system message about new player\r\n      const newPlayer = data.players[data.players.length - 1];\r\n      if (newPlayer) {\r\n        addMessage({\r\n          content: `${newPlayer.username} joined the room`,\r\n          type: 'system',\r\n          timestamp: Date.now()\r\n        });\r\n      }\r\n    });\r\n    \r\n    socket.on('player_left', (data) => {\r\n      if (!data) return;\r\n      setPlayers(data.players || []);\r\n      \r\n      // Add system message about player leaving\r\n      if (data.leftPlayer) {\r\n        addMessage({\r\n          content: `${data.leftPlayer} left the room`,\r\n          type: 'system',\r\n          timestamp: Date.now()\r\n        });\r\n      }\r\n    });\r\n    \r\n    // Money request events\r\n    socket.on('money_request', (data) => {\r\n      console.log('Received money request:', data);\r\n      setPendingMoneyRequests(prev => [...prev, data]);\r\n      \r\n      // Add system message\r\n      addMessage({\r\n        content: `${data.requester.username} requested $${data.amount} from you. If accepted, they will return $${data.returnAmount}.`,\r\n        type: 'system',\r\n        timestamp: Date.now()\r\n      });\r\n    });\r\n    \r\n    socket.on('request_sent', (data) => {\r\n      console.log('Request sent confirmation:', data);\r\n      setSentMoneyRequests(prev => [...prev, data]);\r\n      \r\n      // Add system message\r\n      addMessage({\r\n        content: `You requested $${data.amount} from ${data.targetPlayer.username}.`,\r\n        type: 'system',\r\n        timestamp: Date.now()\r\n      });\r\n    });\r\n    \r\n    socket.on('money_request_accepted', (data) => {\r\n      console.log('Money request accepted:', data);\r\n      // Remove from sent requests\r\n      setSentMoneyRequests(prev => prev.filter(req => req.requestId !== data.requestId));\r\n      \r\n      // Add to active loans\r\n      setActiveLoans(prev => [...prev, {\r\n        ...data,\r\n        status: 'active'\r\n      }]);\r\n      \r\n      // Add system message\r\n      addMessage({\r\n        content: `${data.lender.username} accepted your money request for $${data.amount}. You will need to repay $${data.returnAmount}.`,\r\n        type: 'system',\r\n        timestamp: Date.now()\r\n      });\r\n    });\r\n    \r\n    socket.on('money_sent', (data) => {\r\n      console.log('Money sent:', data);\r\n      // Remove from pending requests\r\n      setPendingMoneyRequests(prev => prev.filter(req => req.requestId !== data.requestId));\r\n      \r\n      // Add system message\r\n      addMessage({\r\n        content: `You sent $${data.amount} to ${data.borrower.username}. They will repay $${data.returnAmount}.`,\r\n        type: 'system',\r\n        timestamp: Date.now()\r\n      });\r\n    });\r\n    \r\n    socket.on('money_request_rejected', (data) => {\r\n      // Remove from sent requests\r\n      setSentMoneyRequests(prev => prev.filter(req => req.requestId !== data.requestId));\r\n      \r\n      // Add system message\r\n      addMessage({\r\n        content: `${data.lender.username} rejected your money request.`,\r\n        type: 'system',\r\n        timestamp: Date.now()\r\n      });\r\n    });\r\n    \r\n    socket.on('request_rejected', (data) => {\r\n      // Remove from pending requests\r\n      setPendingMoneyRequests(prev => prev.filter(req => req.requestId !== data.requestId));\r\n      \r\n      // Add system message\r\n      addMessage({\r\n        content: `You rejected the money request from ${data.borrower.username}.`,\r\n        type: 'system',\r\n        timestamp: Date.now()\r\n      });\r\n    });\r\n    \r\n    socket.on('loan_repaid', (data) => {\r\n      // Remove from active loans\r\n      setActiveLoans(prev => prev.filter(loan => loan.requestId !== data.requestId));\r\n      \r\n      // Add system message\r\n      addMessage({\r\n        content: `${data.borrower.username} repaid their loan of $${data.amount} with interest (total: $${data.returnAmount}).`,\r\n        type: 'system',\r\n        timestamp: Date.now()\r\n      });\r\n    });\r\n    \r\n    socket.on('repayment_sent', (data) => {\r\n      // Remove from active loans\r\n      setActiveLoans(prev => prev.filter(loan => loan.requestId !== data.requestId));\r\n      \r\n      // Add system message\r\n      addMessage({\r\n        content: `You repaid your loan of $${data.amount} to ${data.lender.username} with interest (total: $${data.returnAmount}).`,\r\n        type: 'system',\r\n        timestamp: Date.now()\r\n      });\r\n    });\r\n    \r\n    return () => {\r\n      socket.off('room_joined');\r\n      socket.off('player_joined');\r\n      socket.off('player_left');\r\n      socket.off('money_request');\r\n      socket.off('request_sent');\r\n      socket.off('money_request_accepted');\r\n      socket.off('money_sent');\r\n      socket.off('money_request_rejected');\r\n      socket.off('request_rejected');\r\n      socket.off('loan_repaid');\r\n      socket.off('repayment_sent');\r\n    };\r\n  }, [socket, navigate]);\r\n  \r\n  // Handle game events\r\n  useEffect(() => {\r\n    if (!socket) return;\r\n    \r\n    socket.on('game_started', (data) => {\r\n      if (!data) return;\r\n      setGameState('betting');\r\n      setDealer(data.dealer || { cards: [], score: 0 });\r\n      setPlayers(data.players || []);\r\n      \r\n      addMessage({\r\n        content: 'Game started! Place your bets.',\r\n        type: 'system',\r\n        timestamp: Date.now()\r\n      });\r\n    });\r\n    \r\n    socket.on('betting_ended', (data) => {\r\n      if (!data) return;\r\n      setPlayers(data.players || []);\r\n      setGameState('playing');\r\n      \r\n      addMessage({\r\n        content: 'All bets placed. Game is starting...',\r\n        type: 'system',\r\n        timestamp: Date.now()\r\n      });\r\n    });\r\n    \r\n    socket.on('player_turn', (data) => {\r\n      setCurrentTurn(data.playerId);\r\n      \r\n      const player = data.players && data.players.find(p => p.id === data.playerId);\r\n      \r\n      addMessage({\r\n        content: `It's ${player ? player.username : 'unknown player'}'s turn`,\r\n        type: 'system',\r\n        timestamp: Date.now()\r\n      });\r\n    });\r\n    \r\n    socket.on('card_dealt', (data) => {\r\n      if (!data) return;\r\n      if (data.to === 'dealer') {\r\n        setDealer(data.dealer || { cards: [], score: 0 });\r\n      } else if (data.to && data.cards) {\r\n        setPlayers(prev => \r\n          prev.map(player => \r\n            player.id === data.to ? { ...player, cards: data.cards, score: data.score || 0 } : player\r\n          )\r\n        );\r\n      }\r\n    });\r\n    \r\n    socket.on('turn_ended', (data) => {\r\n      if (!data) return;\r\n      setCurrentTurn(data.nextTurn);\r\n      setPlayers(data.players || []);\r\n    });\r\n    \r\n    socket.on('dealer_turn', () => {\r\n      setCurrentTurn('dealer');\r\n      \r\n      addMessage({\r\n        content: `Dealer's turn`,\r\n        type: 'system',\r\n        timestamp: Date.now()\r\n      });\r\n    });\r\n    \r\n    socket.on('game_ended', (data) => {\r\n      setGameState('ended');\r\n      setDealer(data.dealer);\r\n      setPlayers(data.players || []);\r\n      setCurrentTurn(null);\r\n      \r\n      // Update the player's balance\r\n      const currentPlayer = data.players && data.players.find(p => p.id === socket.id);\r\n      if (currentPlayer) {\r\n        setBalance(currentPlayer.balance);\r\n      }\r\n      \r\n      // Update game history\r\n      if (data.result) {\r\n        setGameHistory(prev => [\r\n          {\r\n            ...data.result,\r\n            timestamp: Date.now(),\r\n            roundNumber: prev.length + 1\r\n          },\r\n          ...prev\r\n        ].slice(0, 10)); // Keep only the last 10 rounds\r\n      }\r\n      \r\n      // Add system message\r\n      addMessage({\r\n        content: `Game ended. Results: ${data.result && data.result.results\r\n          ? data.result.results\r\n              .map(r => `${r.username}: ${r.outcome} (${r.amountChange >= 0 ? '+' : ''}${r.amountChange})`)\r\n              .join(', ')\r\n          : 'No results available'}`,\r\n        type: 'system',\r\n        timestamp: Date.now()\r\n      });\r\n    });\r\n    \r\n    socket.on('new_round', (data) => {\r\n      if (!data) return;\r\n      setGameState('betting');\r\n      setPlayers(data.players || []);\r\n      setDealer({ cards: [], score: 0 });\r\n      \r\n      addMessage({\r\n        content: 'New round started. Place your bets!',\r\n        type: 'system',\r\n        timestamp: Date.now()\r\n      });\r\n    });\r\n    \r\n    socket.on('message', (data) => {\r\n      addMessage(data);\r\n    });\r\n    \r\n    socket.on('leaderboard_updated', (data) => {\r\n      setLeaderboard(data.leaderboard);\r\n    });\r\n    \r\n    socket.on('player_split', (data) => {\r\n      if (!data) return;\r\n      setPlayers(data.players || []);\r\n      \r\n      addMessage({\r\n        content: `${data.players.find(p => p.id === data.playerId)?.username || 'Player'} split their hand`,\r\n        type: 'system',\r\n        timestamp: Date.now()\r\n      });\r\n    });\r\n    \r\n    return () => {\r\n      socket.off('game_started');\r\n      socket.off('betting_ended');\r\n      socket.off('card_dealt');\r\n      socket.off('player_turn');\r\n      socket.off('turn_ended');\r\n      socket.off('dealer_turn');\r\n      socket.off('game_ended');\r\n      socket.off('new_round');\r\n      socket.off('message');\r\n      socket.off('leaderboard_updated');\r\n      socket.off('player_split');\r\n    };\r\n  }, [socket]);\r\n  \r\n  // Game actions\r\n  const createRoom = (username, initialBalance = 1000) => {\r\n    if (!connected) return;\r\n    \r\n    setUsername(username);\r\n    setBalance(initialBalance);\r\n    socket.emit('create_room', { username, balance: initialBalance });\r\n  };\r\n  \r\n  const joinRoom = (roomId, username, initialBalance = 1000) => {\r\n    if (!connected) return;\r\n    \r\n    setUsername(username);\r\n    setBalance(initialBalance);\r\n    socket.emit('join_room', { roomId, username, balance: initialBalance });\r\n  };\r\n  \r\n  const startGame = () => {\r\n    if (!connected || !roomId) return;\r\n    \r\n    socket.emit('start_game', { roomId });\r\n  };\r\n  \r\n  const placeBet = (amount) => {\r\n    if (!connected || !roomId) return;\r\n    \r\n    socket.emit('place_bet', { roomId, amount });\r\n    setLastBet(amount);\r\n  };\r\n  \r\n  const hit = () => {\r\n    if (!connected || !roomId) return;\r\n    \r\n    // For split hands, we need to use the original player's socket ID\r\n    if (currentTurn && currentTurn.includes('-split')) {\r\n      const originalPlayerId = currentTurn.split('-')[0];\r\n      if (originalPlayerId === socket.id) {\r\n        socket.emit('hit', { roomId, handId: currentTurn });\r\n      }\r\n    } else if (currentTurn === socket.id) {\r\n      socket.emit('hit', { roomId });\r\n    }\r\n  };\r\n  \r\n  const stand = () => {\r\n    if (!connected || !roomId) return;\r\n    \r\n    // For split hands, we need to use the original player's socket ID\r\n    if (currentTurn && currentTurn.includes('-split')) {\r\n      const originalPlayerId = currentTurn.split('-')[0];\r\n      if (originalPlayerId === socket.id) {\r\n        socket.emit('stand', { roomId, handId: currentTurn });\r\n      }\r\n    } else if (currentTurn === socket.id) {\r\n      socket.emit('stand', { roomId });\r\n    }\r\n  };\r\n  \r\n  const doubleDown = () => {\r\n    if (!connected || !roomId) return;\r\n    \r\n    // For split hands, we need to use the original player's socket ID\r\n    if (currentTurn && currentTurn.includes('-split')) {\r\n      const originalPlayerId = currentTurn.split('-')[0];\r\n      if (originalPlayerId === socket.id) {\r\n        socket.emit('double_down', { roomId, handId: currentTurn });\r\n      }\r\n    } else if (currentTurn === socket.id) {\r\n      socket.emit('double_down', { roomId });\r\n    }\r\n  };\r\n  \r\n  const split = () => {\r\n    if (!connected || !roomId || currentTurn !== socket.id) return;\r\n    \r\n    // Can't split a split hand\r\n    if (currentTurn.includes('-split')) return;\r\n    \r\n    socket.emit('split', { roomId });\r\n  };\r\n  \r\n  const surrender = () => {\r\n    if (!connected || !roomId) return;\r\n    \r\n    // For split hands, we need to use the original player's socket ID\r\n    if (currentTurn && currentTurn.includes('-split')) {\r\n      const originalPlayerId = currentTurn.split('-')[0];\r\n      if (originalPlayerId === socket.id) {\r\n        socket.emit('surrender', { roomId, handId: currentTurn });\r\n      }\r\n    } else if (currentTurn === socket.id) {\r\n      socket.emit('surrender', { roomId });\r\n    }\r\n  };\r\n  \r\n  const startNewRound = () => {\r\n    if (!connected || !roomId) return;\r\n    \r\n    socket.emit('new_round', { roomId });\r\n  };\r\n  \r\n  const sendMessage = (message) => {\r\n    if (!connected || !roomId) return;\r\n    \r\n    socket.emit('send_message', { roomId, message, sender: username });\r\n  };\r\n  \r\n  const leaveRoom = () => {\r\n    if (!connected || !roomId) return;\r\n    \r\n    socket.emit('leave_room', { roomId });\r\n    setRoomId(null);\r\n    setPlayers([]);\r\n    setDealer({ cards: [], score: 0 });\r\n    setGameState('waiting');\r\n    setCurrentTurn(null);\r\n    setMessages([]);\r\n  };\r\n  \r\n  // Check if it's current player's turn\r\n  const isPlayerTurn = () => {\r\n    if (!socket || !currentTurn) return false;\r\n    \r\n    // Direct match with player's socket ID\r\n    if (currentTurn === socket.id) return true;\r\n    \r\n    // Check if it's the player's split hand turn\r\n    // Split hands have IDs in the format: originalPlayerId-split\r\n    if (currentTurn.includes('-split')) {\r\n      const originalPlayerId = currentTurn.split('-')[0];\r\n      return originalPlayerId === socket.id;\r\n    }\r\n    \r\n    return false;\r\n  };\r\n  \r\n  // Find the current player\r\n  const getCurrentPlayer = () => {\r\n    if (!socket || !players) return null;\r\n    \r\n    // First check for the player's main hand\r\n    const player = players.find(p => p.id === socket.id);\r\n    \r\n    // If it's the player's split hand turn, return that hand instead\r\n    if (currentTurn && currentTurn.includes('-split')) {\r\n      const splitHand = players.find(p => p.id === currentTurn);\r\n      if (splitHand && splitHand.originalPlayer === socket.id) {\r\n        return splitHand;\r\n      }\r\n    }\r\n    \r\n    return player;\r\n  };\r\n  \r\n  // Money request functions\r\n  const requestMoney = (targetPlayerId, amount) => {\r\n    if (!socket || !roomId) return;\r\n    \r\n    socket.emit('request_money', {\r\n      roomId,\r\n      targetPlayerId,\r\n      amount: parseInt(amount, 10)\r\n    });\r\n  };\r\n  \r\n  const acceptMoneyRequest = (requestId) => {\r\n    if (!socket || !roomId) return;\r\n    \r\n    socket.emit('accept_money_request', {\r\n      roomId,\r\n      requestId\r\n    });\r\n  };\r\n  \r\n  const rejectMoneyRequest = (requestId) => {\r\n    if (!socket || !roomId) return;\r\n    \r\n    socket.emit('reject_money_request', {\r\n      roomId,\r\n      requestId\r\n    });\r\n  };\r\n  \r\n  const repayLoan = (requestId) => {\r\n    if (!socket || !roomId) return;\r\n    \r\n    socket.emit('repay_loan', {\r\n      roomId,\r\n      requestId\r\n    });\r\n  };\r\n  \r\n  return (\r\n    <GameContext.Provider\r\n      value={{\r\n        connected,\r\n        username,\r\n        balance,\r\n        roomId,\r\n        players,\r\n        dealer,\r\n        gameState,\r\n        currentTurn,\r\n        messages,\r\n        error,\r\n        gameHistory,\r\n        leaderboard,\r\n        lastBet,\r\n        // Money request states and functions\r\n        pendingMoneyRequests,\r\n        sentMoneyRequests,\r\n        activeLoans,\r\n        requestMoney,\r\n        acceptMoneyRequest,\r\n        rejectMoneyRequest,\r\n        repayLoan,\r\n        createRoom,\r\n        joinRoom,\r\n        startGame,\r\n        placeBet,\r\n        hit,\r\n        stand,\r\n        doubleDown,\r\n        split,\r\n        surrender,\r\n        startNewRound,\r\n        sendMessage,\r\n        leaveRoom,\r\n        isPlayerTurn,\r\n        getCurrentPlayer\r\n      }}\r\n    >\r\n      {children}\r\n    </GameContext.Provider>\r\n  );\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}