{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\twj23\\\\Desktop\\\\Developer\\\\Games\\\\Multiplayer Blackjack - Copy\\\\client\\\\src\\\\components\\\\DealerArea.js\";\nimport React from 'react';\nimport styled from 'styled-components';\nimport Card from './Card';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DealerContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  width: 100%;\n  max-width: 300px;\n`;\n_c = DealerContainer;\nconst DealerTitle = styled.div`\n  font-size: 1.2rem;\n  font-weight: 600;\n  padding: 5px 15px;\n  background-color: rgba(0, 0, 0, 0.7);\n  color: white;\n  border-radius: 20px;\n  margin-bottom: 10px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\n_c2 = DealerTitle;\nconst DealerScore = styled.span`\n  margin-left: 10px;\n  background-color: ${props => props.$score > 21 ? '#f44336' : props.$score >= 17 ? '#e2b714' : '#4caf50'};\n  color: ${props => props.$score > 21 ? 'white' : props.$score >= 17 ? 'black' : 'white'};\n  padding: 2px 8px;\n  border-radius: 10px;\n  font-size: 0.9rem;\n`;\n_c3 = DealerScore;\nconst CardArea = styled.div`\n  display: flex;\n  justify-content: center;\n  min-height: 130px;\n  position: relative;\n`;\n_c4 = CardArea;\nconst DealerStatus = styled.div`\n  margin-top: 5px;\n  font-size: 0.9rem;\n  color: #e2b714;\n`;\n_c5 = DealerStatus;\nconst ScoreChip = styled.div`\n  position: absolute;\n  top: 45px;\n  right: -15px;\n  background-color: #2c2c44;\n  color: ${props => props.$score > 21 ? '#f44336' : props.$score === 21 ? '#e2b714' : 'white'};\n  border: 1px solid ${props => props.$score > 21 ? '#f44336' : props.$score === 21 ? '#e2b714' : '#444'};\n  border-radius: 50%;\n  width: 30px;\n  height: 30px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-weight: bold;\n  font-size: 0.9rem;\n  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);\n  z-index: 10;\n`;\n_c6 = ScoreChip;\nconst DealerArea = ({\n  dealer,\n  gameState,\n  currentTurn\n}) => {\n  const {\n    cards,\n    score\n  } = dealer;\n  const isDealerTurn = currentTurn === 'dealer';\n  const showAllCards = gameState === 'ended' || isDealerTurn;\n\n  // Calculate visible score (only count visible cards)\n  const visibleScore = showAllCards ? score : cards && cards.length > 0 ? calculateVisibleScore(cards) : 0;\n\n  // Determine dealer status text\n  const getDealerStatus = () => {\n    if (showAllCards) {\n      if (score > 21) return 'Dealer busts!';\n      if (score >= 17) return 'Dealer stands on ' + score;\n      return 'Dealer hits';\n    }\n    return 'Dealer stands on 17';\n  };\n\n  // Calculate score for visible cards only\n  function calculateVisibleScore(cards) {\n    if (!cards || cards.length === 0) return 0;\n\n    // Only count the first card if second card is hidden\n    const visibleCards = showAllCards ? cards : [cards[0]];\n    let score = 0;\n    let aces = 0;\n\n    // Count score and aces\n    for (const card of visibleCards) {\n      if (card.value === 'ace') {\n        aces++;\n        score += 11;\n      } else if (['king', 'queen', 'jack'].includes(card.value)) {\n        score += 10;\n      } else {\n        score += parseInt(card.value);\n      }\n    }\n\n    // Convert aces from 11 to 1 as needed to avoid busting\n    while (score > 21 && aces > 0) {\n      score -= 10;\n      aces--;\n    }\n    return score;\n  }\n  return /*#__PURE__*/_jsxDEV(DealerContainer, {\n    children: [/*#__PURE__*/_jsxDEV(DealerTitle, {\n      children: [\"Dealer\", cards && cards.length > 0 && /*#__PURE__*/_jsxDEV(DealerScore, {\n        $score: visibleScore,\n        children: visibleScore\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CardArea, {\n      children: [cards && cards.map((card, index) => {\n        // Hide the second card if game is still in progress and not dealer's turn\n        const isHidden = index === 1 && !showAllCards;\n        return /*#__PURE__*/_jsxDEV(Card, {\n          card: card,\n          hidden: isHidden\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 18\n        }, this);\n      }), cards && cards.length > 0 && showAllCards && /*#__PURE__*/_jsxDEV(ScoreChip, {\n        $score: score,\n        children: score\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DealerStatus, {\n      children: getDealerStatus()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 118,\n    columnNumber: 5\n  }, this);\n};\n_c7 = DealerArea;\nexport default DealerArea;\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7;\n$RefreshReg$(_c, \"DealerContainer\");\n$RefreshReg$(_c2, \"DealerTitle\");\n$RefreshReg$(_c3, \"DealerScore\");\n$RefreshReg$(_c4, \"CardArea\");\n$RefreshReg$(_c5, \"DealerStatus\");\n$RefreshReg$(_c6, \"ScoreChip\");\n$RefreshReg$(_c7, \"DealerArea\");","map":{"version":3,"names":["React","styled","Card","jsxDEV","_jsxDEV","DealerContainer","div","_c","DealerTitle","_c2","DealerScore","span","props","$score","_c3","CardArea","_c4","DealerStatus","_c5","ScoreChip","_c6","DealerArea","dealer","gameState","currentTurn","cards","score","isDealerTurn","showAllCards","visibleScore","length","calculateVisibleScore","getDealerStatus","visibleCards","aces","card","value","includes","parseInt","children","fileName","_jsxFileName","lineNumber","columnNumber","map","index","isHidden","hidden","_c7","$RefreshReg$"],"sources":["C:/Users/twj23/Desktop/Developer/Games/Multiplayer Blackjack - Copy/client/src/components/DealerArea.js"],"sourcesContent":["import React from 'react';\r\nimport styled from 'styled-components';\r\nimport Card from './Card';\r\n\r\nconst DealerContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  width: 100%;\r\n  max-width: 300px;\r\n`;\r\n\r\nconst DealerTitle = styled.div`\r\n  font-size: 1.2rem;\r\n  font-weight: 600;\r\n  padding: 5px 15px;\r\n  background-color: rgba(0, 0, 0, 0.7);\r\n  color: white;\r\n  border-radius: 20px;\r\n  margin-bottom: 10px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n`;\r\n\r\nconst DealerScore = styled.span`\r\n  margin-left: 10px;\r\n  background-color: ${props => props.$score > 21 ? '#f44336' : props.$score >= 17 ? '#e2b714' : '#4caf50'};\r\n  color: ${props => props.$score > 21 ? 'white' : props.$score >= 17 ? 'black' : 'white'};\r\n  padding: 2px 8px;\r\n  border-radius: 10px;\r\n  font-size: 0.9rem;\r\n`;\r\n\r\nconst CardArea = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  min-height: 130px;\r\n  position: relative;\r\n`;\r\n\r\nconst DealerStatus = styled.div`\r\n  margin-top: 5px;\r\n  font-size: 0.9rem;\r\n  color: #e2b714;\r\n`;\r\n\r\nconst ScoreChip = styled.div`\r\n  position: absolute;\r\n  top: 45px;\r\n  right: -15px;\r\n  background-color: #2c2c44;\r\n  color: ${props => props.$score > 21 ? '#f44336' : props.$score === 21 ? '#e2b714' : 'white'};\r\n  border: 1px solid ${props => props.$score > 21 ? '#f44336' : props.$score === 21 ? '#e2b714' : '#444'};\r\n  border-radius: 50%;\r\n  width: 30px;\r\n  height: 30px;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  font-weight: bold;\r\n  font-size: 0.9rem;\r\n  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);\r\n  z-index: 10;\r\n`;\r\n\r\nconst DealerArea = ({ dealer, gameState, currentTurn }) => {\r\n  const { cards, score } = dealer;\r\n  const isDealerTurn = currentTurn === 'dealer';\r\n  const showAllCards = gameState === 'ended' || isDealerTurn;\r\n  \r\n  // Calculate visible score (only count visible cards)\r\n  const visibleScore = showAllCards ? score : \r\n    cards && cards.length > 0 ? calculateVisibleScore(cards) : 0;\r\n  \r\n  // Determine dealer status text\r\n  const getDealerStatus = () => {\r\n    if (showAllCards) {\r\n      if (score > 21) return 'Dealer busts!';\r\n      if (score >= 17) return 'Dealer stands on ' + score;\r\n      return 'Dealer hits';\r\n    }\r\n    return 'Dealer stands on 17';\r\n  };\r\n  \r\n  // Calculate score for visible cards only\r\n  function calculateVisibleScore(cards) {\r\n    if (!cards || cards.length === 0) return 0;\r\n    \r\n    // Only count the first card if second card is hidden\r\n    const visibleCards = showAllCards ? cards : [cards[0]];\r\n    \r\n    let score = 0;\r\n    let aces = 0;\r\n    \r\n    // Count score and aces\r\n    for (const card of visibleCards) {\r\n      if (card.value === 'ace') {\r\n        aces++;\r\n        score += 11;\r\n      } else if (['king', 'queen', 'jack'].includes(card.value)) {\r\n        score += 10;\r\n      } else {\r\n        score += parseInt(card.value);\r\n      }\r\n    }\r\n    \r\n    // Convert aces from 11 to 1 as needed to avoid busting\r\n    while (score > 21 && aces > 0) {\r\n      score -= 10;\r\n      aces--;\r\n    }\r\n    \r\n    return score;\r\n  }\r\n  \r\n  return (\r\n    <DealerContainer>\r\n      <DealerTitle>\r\n        Dealer\r\n        {cards && cards.length > 0 && (\r\n          <DealerScore $score={visibleScore}>{visibleScore}</DealerScore>\r\n        )}\r\n      </DealerTitle>\r\n      \r\n      <CardArea>\r\n        {cards && cards.map((card, index) => {\r\n          // Hide the second card if game is still in progress and not dealer's turn\r\n          const isHidden = index === 1 && !showAllCards;\r\n          return <Card key={index} card={card} hidden={isHidden} />;\r\n        })}\r\n        \r\n        {cards && cards.length > 0 && showAllCards && (\r\n          <ScoreChip $score={score}>{score}</ScoreChip>\r\n        )}\r\n      </CardArea>\r\n      \r\n      <DealerStatus>{getDealerStatus()}</DealerStatus>\r\n    </DealerContainer>\r\n  );\r\n};\r\n\r\nexport default DealerArea; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}